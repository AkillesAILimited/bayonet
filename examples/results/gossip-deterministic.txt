statement: __d := __D'()
particle-size: 1
particle-size: 1
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'() , this.__S2 = __node_ty'() , this.__S3 = __node_ty'()
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'() , this.__S2 = __node_ty'()
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'()
statement: this.__S0 = __first_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S1 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S2 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S3 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.phase = 0
particle-size: 1
statement: this.cur_node = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__S0.Q_in.pushBack((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = this'.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__S0.__run()
particle-size: 1
particle-size: 1
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this'.infected = 1
particle-size: 1
statement: this'.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.data = [x] ~ this'.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this'.front()
particle-size: 1
particle-size: 1
statement: return this'.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this'.popFront()
particle-size: 1
particle-size: 1
statement: this'.data = this'.data[1..this'.size()]
particle-size: 1
particle-size: 1
statement: return this'.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: assert((sampleFrom("(r;a,b)=>δ(0)[-r+∑_i[a≤i]·[i≤b]]",a,b): ℝ) != 0)
statement: return sampleFrom("(x;a,b)=>(∑_i[a≤i]·[i≤b]·δ(0)[i-x])·⅟(∑_i[a≤i]·[i≤b])",a,b): ℝ
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.data = this'.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: repeat 15 {
    __d.__step();
}
repetition: 1
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 2
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 3
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 4
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 5
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 6
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 7
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 8
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 9
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 10
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 11
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 12
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 13
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 14
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 15
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this'.__S0.Q_in.size() || this'.__S0.Q_out.size() || this'.__S1.Q_in.size() || this'.__S1.Q_out.size() || this'.__S2.Q_in.size() || this'.__S2.Q_out.size() || this'.__S3.Q_in.size() || this'.__S3.Q_out.size() {
    (action,node) := this'.scheduler();
    if action {
        if node == 0 && this'.__S0.Q_out.size() {
            (pkt,port) := this'.__S0.Q_out.takeFront();
            if port == 1 {
                this'.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this'.__S1.Q_out.size() {
            (pkt,port) := this'.__S1.Q_out.takeFront();
            if port == 1 {
                this'.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this'.__S2.Q_out.size() {
            (pkt,port) := this'.__S2.Q_out.takeFront();
            if port == 1 {
                this'.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this'.__S3.Q_out.size() {
            (pkt,port) := this'.__S3.Q_out.takeFront();
            if port == 1 {
                this'.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this'.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this'.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this'.__S0.Q_in.size() {
            this'.__S0.__run();
        }
        if node == 1 && this'.__S1.Q_in.size() {
            this'.__S1.__run();
        }
        if node == 2 && this'.__S2.Q_in.size() {
            this'.__S2.__run();
        }
        if node == 3 && this'.__S3.Q_in.size() {
            this'.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this'.scheduler()
particle-size: 3
particle-size: 3
statement: for p in [0..2){
    if this'.phase == 0 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_in;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_in;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_in;
            } else {
                this'.__S3.Q_in;
            }).size() > 0 {
                return (0,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 1;
        this'.cur_node = 0;
    }
    if this'.phase == 1 {
        for i in [0..4){
            if (if this'.cur_node == 0 {
                this'.__S0.Q_out;
            } else if this'.cur_node == 1 {
                this'.__S1.Q_out;
            } else if this'.cur_node == 2 {
                this'.__S2.Q_out;
            } else {
                this'.__S3.Q_out;
            }).size() > 0 {
                return (1,this'.cur_node);
            }
            this'.cur_node = (this'.cur_node + 1) % 4;
        }
        this'.phase = 0;
        this'.cur_node = 0;
    }
}
loop-index: 0
particle-size: 3
statement: if this'.phase == 0 {
    for i in [0..4){
        if (if this'.cur_node == 0 {
            this'.__S0.Q_in;
        } else if this'.cur_node == 1 {
            this'.__S1.Q_in;
        } else if this'.cur_node == 2 {
            this'.__S2.Q_in;
        } else {
            this'.__S3.Q_in;
        }).size() > 0 {
            return (0,this'.cur_node);
        }
        this'.cur_node = (this'.cur_node + 1) % 4;
    }
    this'.phase = 1;
    this'.cur_node = 0;
}
statement: for i in [0..4){
    if (if this'.cur_node == 0 {
        this'.__S0.Q_in;
    } else if this'.cur_node == 1 {
        this'.__S1.Q_in;
    } else if this'.cur_node == 2 {
        this'.__S2.Q_in;
    } else {
        this'.__S3.Q_in;
    }).size() > 0 {
        return (0,this'.cur_node);
    }
    this'.cur_node = (this'.cur_node + 1) % 4;
}
loop-index: 0
particle-size: 3
statement: if (if this'.cur_node == 0 {
    this'.__S0.Q_in;
} else if this'.cur_node == 1 {
    this'.__S1.Q_in;
} else if this'.cur_node == 2 {
    this'.__S2.Q_in;
} else {
    this'.__S3.Q_in;
}).size() > 0 {
    return (0,this'.cur_node);
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return (0,this'.cur_node)
particle-size: 3
loop-index: 1
particle-size: 0
loop-index: 2
particle-size: 0
loop-index: 3
particle-size: 0
loop-index: 1
particle-size: 0
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this'.__S0.Q_out.size() {
        (pkt,port) := this'.__S0.Q_out.takeFront();
        if port == 1 {
            this'.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this'.__S1.Q_out.size() {
        (pkt,port) := this'.__S1.Q_out.takeFront();
        if port == 1 {
            this'.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this'.__S2.Q_out.size() {
        (pkt,port) := this'.__S2.Q_out.takeFront();
        if port == 1 {
            this'.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this'.__S3.Q_out.size() {
        (pkt,port) := this'.__S3.Q_out.takeFront();
        if port == 1 {
            this'.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this'.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this'.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this'.__S0.Q_in.size() {
        this'.__S0.__run();
    }
    if node == 1 && this'.__S1.Q_in.size() {
        this'.__S1.__run();
    }
    if node == 2 && this'.__S2.Q_in.size() {
        this'.__S2.__run();
    }
    if node == 3 && this'.__S3.Q_in.size() {
        this'.__S3.__run();
    }
}
statement: if node == 0 && this'.__S0.Q_in.size() {
    this'.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this'.__S0.__run()
particle-size: 3
particle-size: 3
statement: if (this'.infected == 0) {
    this'.infected = 1;
    this'.Q_in.pushFront((Packet'(),0));
    this'.Q_out.pushBack((this'.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this'.__S1.Q_in.size() {
    this'.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this'.__S2.Q_in.size() {
    this'.__S2.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this'.__S3.Q_in.size() {
    this'.__S3.__run();
}
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: assert(!(__d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size()))
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this'.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
E[q1_] = 0
Pr[error] = 1

real	0m0.177s
user	0m0.160s
sys	0m0.016s
