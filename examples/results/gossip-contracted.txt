statement: __d := __D'()
particle-size: 1
particle-size: 1
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'() , this.__S2 = __node_ty'() , this.__S3 = __node_ty'()
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'() , this.__S2 = __node_ty'()
statement: this.__S0 = __first_ty'() , this.__S1 = __node_ty'()
statement: this.__S0 = __first_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S1 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S2 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S3 = __node_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.infected = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__S0.__run()
particle-size: 1
particle-size: 1
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.pushFront((Packet'(),0));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 1
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = [x] ~ this.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: repeat 20 {
    __d.__step();
}
repetition: 1
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 1 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 2 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 3 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this.scheduler()
particle-size: 3
particle-size: 3
statement: actions := ([]: (R × R)[])
particle-size: 3
statement: for i in [0..4){
    if (if i == 0 {
        this.__S0.Q_in;
    } else if i == 1 {
        this.__S1.Q_in;
    } else if i == 2 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__S0.Q_out;
    } else if i == 1 {
        this.__S1.Q_out;
    } else if i == 2 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: actions ~= [(1,i)]
particle-size: 3
loop-index: 1
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
loop-index: 2
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
loop-index: 3
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 1 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 2 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 3 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this.__S1.Q_in.pushBack((pkt,3));
}
statement: this.__S1.Q_in.pushBack((pkt,3))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: this.__S2.Q_in.pushBack((pkt,2))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 1 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
repetition: 2
statement: __d.__step()
particle-size: 3
particle-size: 3
statement: if this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 1 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 2 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 3 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: (action,node) := this.scheduler()
particle-size: 3
particle-size: 3
statement: actions := ([]: (R × R)[])
particle-size: 3
statement: for i in [0..4){
    if (if i == 0 {
        this.__S0.Q_in;
    } else if i == 1 {
        this.__S1.Q_in;
    } else if i == 2 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__S0.Q_out;
    } else if i == 1 {
        this.__S1.Q_out;
    } else if i == 2 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
loop-index: 1
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
loop-index: 2
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
loop-index: 3
particle-size: 3
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if action {
    if node == 0 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 1 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 2 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 3 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 1 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.__S1.__run()
particle-size: 1
particle-size: 1
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 1
statement: this.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this.pushFront(this.front())
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = [x] ~ this.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 2 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 11
particle-size: 11
statement: return this.data.length
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: this.__S2.__run()
particle-size: 1
particle-size: 1
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 1
statement: this.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this.pushFront(this.front())
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = [x] ~ this.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 3 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 19
particle-size: 19
statement: return this.data.length
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: this.__S3.__run()
particle-size: 1
particle-size: 1
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 1
statement: this.Q_in.dupFront()
particle-size: 1
particle-size: 1
statement: this.pushFront(this.front())
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = [x] ~ this.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
repetition: 3
statement: __d.__step()
particle-size: 27
particle-size: 27
statement: if this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 1 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 2 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 3 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (action,node) := this.scheduler()
particle-size: 27
particle-size: 27
statement: actions := ([]: (R × R)[])
particle-size: 27
statement: for i in [0..4){
    if (if i == 0 {
        this.__S0.Q_in;
    } else if i == 1 {
        this.__S1.Q_in;
    } else if i == 2 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__S0.Q_out;
    } else if i == 1 {
        this.__S1.Q_out;
    } else if i == 2 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
loop-index: 1
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: actions ~= [(1,i)]
particle-size: 9
loop-index: 2
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: actions ~= [(1,i)]
particle-size: 9
loop-index: 3
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: actions ~= [(1,i)]
particle-size: 9
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if action {
    if node == 0 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 1 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 2 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 3 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if node == 1 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this.front()
particle-size: 9
particle-size: 9
statement: return this.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.popFront()
particle-size: 9
particle-size: 9
statement: this.data = this.data[1..this.size()]
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: this.__S2.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this.front()
particle-size: 9
particle-size: 9
statement: return this.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.popFront()
particle-size: 9
particle-size: 9
statement: this.data = this.data[1..this.size()]
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this.__S3.Q_in.pushBack((pkt,3));
}
statement: this.__S3.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: this.__S0.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this.front()
particle-size: 9
particle-size: 9
statement: return this.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.popFront()
particle-size: 9
particle-size: 9
statement: this.data = this.data[1..this.size()]
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
repetition: 4
statement: __d.__step()
particle-size: 27
particle-size: 27
statement: if this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 1 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 2 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 3 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (action,node) := this.scheduler()
particle-size: 27
particle-size: 27
statement: actions := ([]: (R × R)[])
particle-size: 27
statement: for i in [0..4){
    if (if i == 0 {
        this.__S0.Q_in;
    } else if i == 1 {
        this.__S1.Q_in;
    } else if i == 2 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__S0.Q_out;
    } else if i == 1 {
        this.__S1.Q_out;
    } else if i == 2 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: actions ~= [(0,i)]
particle-size: 9
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
loop-index: 1
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: actions ~= [(1,i)]
particle-size: 9
loop-index: 2
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: actions ~= [(1,i)]
particle-size: 9
loop-index: 3
particle-size: 27
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
statement: actions ~= [(1,i)]
particle-size: 9
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if action {
    if node == 0 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 1 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 2 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 3 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if node == 1 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this.front()
particle-size: 9
particle-size: 9
statement: return this.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.popFront()
particle-size: 9
particle-size: 9
statement: this.data = this.data[1..this.size()]
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: this.__S2.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this.front()
particle-size: 9
particle-size: 9
statement: return this.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.popFront()
particle-size: 9
particle-size: 9
statement: this.data = this.data[1..this.size()]
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this.__S3.Q_in.pushBack((pkt,3));
}
statement: this.__S3.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: this.__S0.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this.front()
particle-size: 9
particle-size: 9
statement: return this.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.popFront()
particle-size: 9
particle-size: 9
statement: this.data = this.data[1..this.size()]
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 0 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this.__S0.__run()
particle-size: 9
particle-size: 9
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.pushFront((Packet'(),0));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 1 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this.__S1.__run()
particle-size: 6
particle-size: 6
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 6
statement: this.Q_in.dupFront()
particle-size: 6
particle-size: 6
statement: this.pushFront(this.front())
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.data = [x] ~ this.data
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this.front()
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.popFront()
particle-size: 6
particle-size: 6
statement: this.data = this.data[1..this.size()]
particle-size: 6
particle-size: 6
statement: return this.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 54
particle-size: 54
particle-size: 54
statement: this.data = this.data ~ [x]
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if node == 2 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 75
particle-size: 75
statement: return this.data.length
particle-size: 75
particle-size: 75
particle-size: 75
particle-size: 75
statement: this.__S2.__run()
particle-size: 6
particle-size: 6
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 6
statement: this.Q_in.dupFront()
particle-size: 6
particle-size: 6
statement: this.pushFront(this.front())
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.data = [x] ~ this.data
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this.front()
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.popFront()
particle-size: 6
particle-size: 6
statement: this.data = this.data[1..this.size()]
particle-size: 6
particle-size: 6
statement: return this.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 54
particle-size: 54
particle-size: 54
statement: this.data = this.data ~ [x]
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if node == 3 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 123
particle-size: 123
statement: return this.data.length
particle-size: 123
particle-size: 123
particle-size: 123
particle-size: 123
statement: this.__S3.__run()
particle-size: 6
particle-size: 6
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 6
statement: this.Q_in.dupFront()
particle-size: 6
particle-size: 6
statement: this.pushFront(this.front())
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.data = [x] ~ this.data
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this.front()
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.popFront()
particle-size: 6
particle-size: 6
statement: this.data = this.data[1..this.size()]
particle-size: 6
particle-size: 6
statement: return this.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 54
particle-size: 54
particle-size: 54
statement: this.data = this.data ~ [x]
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 189
repetition: 5
statement: __d.__step()
particle-size: 189
particle-size: 189
statement: if this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 1 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 2 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 3 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
particle-size: 189
statement: (action,node) := this.scheduler()
particle-size: 189
particle-size: 189
statement: actions := ([]: (R × R)[])
particle-size: 189
statement: for i in [0..4){
    if (if i == 0 {
        this.__S0.Q_in;
    } else if i == 1 {
        this.__S1.Q_in;
    } else if i == 2 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__S0.Q_out;
    } else if i == 1 {
        this.__S1.Q_out;
    } else if i == 2 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 189
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
statement: actions ~= [(0,i)]
particle-size: 18
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
loop-index: 1
particle-size: 189
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
statement: actions ~= [(1,i)]
particle-size: 111
loop-index: 2
particle-size: 189
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
statement: actions ~= [(1,i)]
particle-size: 111
loop-index: 3
particle-size: 189
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
statement: actions ~= [(0,i)]
particle-size: 6
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 189
particle-size: 189
statement: return this.data.length
particle-size: 189
particle-size: 189
particle-size: 189
statement: actions ~= [(1,i)]
particle-size: 111
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 369
particle-size: 369
particle-size: 369
particle-size: 369
particle-size: 369
particle-size: 369
statement: if action {
    if node == 0 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 1 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 2 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 3 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 333
particle-size: 333
statement: return this.data.length
particle-size: 333
particle-size: 333
particle-size: 333
particle-size: 333
statement: if node == 1 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 333
particle-size: 333
statement: return this.data.length
particle-size: 333
particle-size: 333
particle-size: 333
particle-size: 333
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 111
particle-size: 111
statement: r := this.front()
particle-size: 111
particle-size: 111
statement: return this.data[0]
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: this.popFront()
particle-size: 111
particle-size: 111
statement: this.data = this.data[1..this.size()]
particle-size: 111
particle-size: 111
statement: return this.data.length
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: return ()
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: return r
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: if port == 1 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: this.__S2.Q_in.pushBack((pkt,3))
particle-size: 37
particle-size: 37
particle-size: 37
statement: this.data = this.data ~ [x]
particle-size: 37
statement: return ()
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: if port == 2 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 37
particle-size: 37
particle-size: 37
statement: this.data = this.data ~ [x]
particle-size: 37
statement: return ()
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: if port == 3 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 37
particle-size: 37
particle-size: 37
statement: this.data = this.data ~ [x]
particle-size: 37
statement: return ()
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: if node == 2 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 333
particle-size: 333
statement: return this.data.length
particle-size: 333
particle-size: 333
particle-size: 333
particle-size: 333
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 111
particle-size: 111
statement: r := this.front()
particle-size: 111
particle-size: 111
statement: return this.data[0]
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: this.popFront()
particle-size: 111
particle-size: 111
statement: this.data = this.data[1..this.size()]
particle-size: 111
particle-size: 111
statement: return this.data.length
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: return ()
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: return r
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: if port == 1 {
    this.__S3.Q_in.pushBack((pkt,3));
}
statement: this.__S3.Q_in.pushBack((pkt,3))
particle-size: 37
particle-size: 37
particle-size: 37
statement: this.data = this.data ~ [x]
particle-size: 37
statement: return ()
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: if port == 2 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: this.__S0.Q_in.pushBack((pkt,2))
particle-size: 37
particle-size: 37
particle-size: 37
statement: this.data = this.data ~ [x]
particle-size: 37
statement: return ()
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: if port == 3 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 37
particle-size: 37
particle-size: 37
statement: this.data = this.data ~ [x]
particle-size: 37
statement: return ()
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: if node == 3 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 333
particle-size: 333
statement: return this.data.length
particle-size: 333
particle-size: 333
particle-size: 333
particle-size: 333
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 111
particle-size: 111
statement: r := this.front()
particle-size: 111
particle-size: 111
statement: return this.data[0]
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: this.popFront()
particle-size: 111
particle-size: 111
statement: this.data = this.data[1..this.size()]
particle-size: 111
particle-size: 111
statement: return this.data.length
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: return ()
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: return r
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
particle-size: 111
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
particle-size: 37
particle-size: 37
particle-size: 37
statement: this.data = this.data ~ [x]
particle-size: 37
statement: return ()
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
particle-size: 37
particle-size: 37
particle-size: 37
statement: this.data = this.data ~ [x]
particle-size: 37
statement: return ()
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: if port == 3 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
particle-size: 37
particle-size: 37
particle-size: 37
statement: this.data = this.data ~ [x]
particle-size: 37
statement: return ()
particle-size: 37
particle-size: 37
particle-size: 37
particle-size: 37
statement: if node == 0 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 36
particle-size: 36
statement: return this.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this.__S0.__run()
particle-size: 18
particle-size: 18
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.pushFront((Packet'(),0));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if node == 1 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 36
particle-size: 36
statement: return this.data.length
particle-size: 36
particle-size: 36
particle-size: 36
particle-size: 36
statement: this.__S1.__run()
particle-size: 6
particle-size: 6
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 6
statement: this.Q_in.dupFront()
particle-size: 6
particle-size: 6
statement: this.pushFront(this.front())
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.data = [x] ~ this.data
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this.front()
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.popFront()
particle-size: 6
particle-size: 6
statement: this.data = this.data[1..this.size()]
particle-size: 6
particle-size: 6
statement: return this.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 54
particle-size: 54
particle-size: 54
statement: this.data = this.data ~ [x]
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if node == 2 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 84
particle-size: 84
statement: return this.data.length
particle-size: 84
particle-size: 84
particle-size: 84
particle-size: 84
statement: this.__S2.__run()
particle-size: 6
particle-size: 6
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 6
statement: this.Q_in.dupFront()
particle-size: 6
particle-size: 6
statement: this.pushFront(this.front())
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.data = [x] ~ this.data
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this.front()
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.popFront()
particle-size: 6
particle-size: 6
statement: this.data = this.data[1..this.size()]
particle-size: 6
particle-size: 6
statement: return this.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 54
particle-size: 54
particle-size: 54
statement: this.data = this.data ~ [x]
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if node == 3 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 132
particle-size: 132
statement: return this.data.length
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
statement: this.__S3.__run()
particle-size: 6
particle-size: 6
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 6
statement: this.Q_in.dupFront()
particle-size: 6
particle-size: 6
statement: this.pushFront(this.front())
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.data = [x] ~ this.data
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 6
particle-size: 6
statement: r := this.front()
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.popFront()
particle-size: 6
particle-size: 6
statement: this.data = this.data[1..this.size()]
particle-size: 6
particle-size: 6
statement: return this.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 54
particle-size: 54
particle-size: 54
statement: this.data = this.data ~ [x]
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: return ()
particle-size: 513
particle-size: 513
particle-size: 513
particle-size: 342
repetition: 6
statement: __d.__step()
particle-size: 342
particle-size: 342
statement: if this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 1 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 2 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 3 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: (action,node) := this.scheduler()
particle-size: 342
particle-size: 342
statement: actions := ([]: (R × R)[])
particle-size: 342
statement: for i in [0..4){
    if (if i == 0 {
        this.__S0.Q_in;
    } else if i == 1 {
        this.__S1.Q_in;
    } else if i == 2 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__S0.Q_out;
    } else if i == 1 {
        this.__S1.Q_out;
    } else if i == 2 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 342
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
statement: actions ~= [(0,i)]
particle-size: 126
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
loop-index: 1
particle-size: 342
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
statement: actions ~= [(0,i)]
particle-size: 74
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
statement: actions ~= [(1,i)]
particle-size: 165
loop-index: 2
particle-size: 342
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
statement: actions ~= [(0,i)]
particle-size: 74
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
statement: actions ~= [(1,i)]
particle-size: 165
loop-index: 3
particle-size: 342
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
statement: actions ~= [(0,i)]
particle-size: 74
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 342
particle-size: 342
statement: return this.data.length
particle-size: 342
particle-size: 342
particle-size: 342
statement: actions ~= [(1,i)]
particle-size: 165
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 843
particle-size: 843
particle-size: 843
particle-size: 843
particle-size: 843
particle-size: 843
statement: if action {
    if node == 0 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 1 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 2 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 3 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 495
particle-size: 495
statement: return this.data.length
particle-size: 495
particle-size: 495
particle-size: 495
particle-size: 495
statement: if node == 1 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 495
particle-size: 495
statement: return this.data.length
particle-size: 495
particle-size: 495
particle-size: 495
particle-size: 495
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 165
particle-size: 165
statement: r := this.front()
particle-size: 165
particle-size: 165
statement: return this.data[0]
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: this.popFront()
particle-size: 165
particle-size: 165
statement: this.data = this.data[1..this.size()]
particle-size: 165
particle-size: 165
statement: return this.data.length
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: return ()
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: return r
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: if port == 1 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: this.__S2.Q_in.pushBack((pkt,3))
particle-size: 55
particle-size: 55
particle-size: 55
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 55
particle-size: 55
particle-size: 55
statement: if port == 2 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 55
particle-size: 55
particle-size: 55
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 55
particle-size: 55
particle-size: 55
statement: if port == 3 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 55
particle-size: 55
particle-size: 55
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 55
particle-size: 55
particle-size: 55
statement: if node == 2 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 495
particle-size: 495
statement: return this.data.length
particle-size: 495
particle-size: 495
particle-size: 495
particle-size: 495
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 165
particle-size: 165
statement: r := this.front()
particle-size: 165
particle-size: 165
statement: return this.data[0]
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: this.popFront()
particle-size: 165
particle-size: 165
statement: this.data = this.data[1..this.size()]
particle-size: 165
particle-size: 165
statement: return this.data.length
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: return ()
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: return r
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: if port == 1 {
    this.__S3.Q_in.pushBack((pkt,3));
}
statement: this.__S3.Q_in.pushBack((pkt,3))
particle-size: 55
particle-size: 55
particle-size: 55
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 55
particle-size: 55
particle-size: 55
statement: if port == 2 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: this.__S0.Q_in.pushBack((pkt,2))
particle-size: 55
particle-size: 55
particle-size: 55
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 55
particle-size: 55
particle-size: 55
statement: if port == 3 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 55
particle-size: 55
particle-size: 55
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 55
particle-size: 55
particle-size: 55
statement: if node == 3 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 495
particle-size: 495
statement: return this.data.length
particle-size: 495
particle-size: 495
particle-size: 495
particle-size: 495
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 165
particle-size: 165
statement: r := this.front()
particle-size: 165
particle-size: 165
statement: return this.data[0]
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: this.popFront()
particle-size: 165
particle-size: 165
statement: this.data = this.data[1..this.size()]
particle-size: 165
particle-size: 165
statement: return this.data.length
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: return ()
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: return r
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
particle-size: 165
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
particle-size: 55
particle-size: 55
particle-size: 55
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 55
particle-size: 55
particle-size: 55
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
particle-size: 55
particle-size: 55
particle-size: 55
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 55
particle-size: 55
particle-size: 55
statement: if port == 3 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
particle-size: 55
particle-size: 55
particle-size: 55
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 55
particle-size: 55
particle-size: 55
statement: if node == 0 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 348
particle-size: 348
statement: return this.data.length
particle-size: 348
particle-size: 348
particle-size: 348
particle-size: 348
statement: this.__S0.__run()
particle-size: 126
particle-size: 126
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.pushFront((Packet'(),0));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 126
particle-size: 126
particle-size: 126
particle-size: 126
statement: if node == 1 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 348
particle-size: 348
statement: return this.data.length
particle-size: 348
particle-size: 348
particle-size: 348
particle-size: 348
statement: this.__S1.__run()
particle-size: 74
particle-size: 74
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 38
statement: this.Q_in.dupFront()
particle-size: 38
particle-size: 38
statement: this.pushFront(this.front())
particle-size: 38
particle-size: 38
statement: return this.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this.data = [x] ~ this.data
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 38
particle-size: 38
statement: r := this.front()
particle-size: 38
particle-size: 38
statement: return this.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this.popFront()
particle-size: 38
particle-size: 38
statement: this.data = this.data[1..this.size()]
particle-size: 38
particle-size: 38
statement: return this.data.length
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return r
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 114
particle-size: 114
particle-size: 114
statement: this.data = this.data ~ [x]
particle-size: 114
statement: return ()
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 114
particle-size: 114
statement: r := this.front()
particle-size: 114
particle-size: 114
statement: return this.data[0]
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: this.popFront()
particle-size: 114
particle-size: 114
statement: this.data = this.data[1..this.size()]
particle-size: 114
particle-size: 114
statement: return this.data.length
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: return ()
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: return r
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 342
particle-size: 342
particle-size: 342
statement: this.data = this.data ~ [x]
particle-size: 342
statement: return ()
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return ()
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
statement: if node == 2 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 652
particle-size: 652
statement: return this.data.length
particle-size: 652
particle-size: 652
particle-size: 652
particle-size: 652
statement: this.__S2.__run()
particle-size: 74
particle-size: 74
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 38
statement: this.Q_in.dupFront()
particle-size: 38
particle-size: 38
statement: this.pushFront(this.front())
particle-size: 38
particle-size: 38
statement: return this.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this.data = [x] ~ this.data
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 38
particle-size: 38
statement: r := this.front()
particle-size: 38
particle-size: 38
statement: return this.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this.popFront()
particle-size: 38
particle-size: 38
statement: this.data = this.data[1..this.size()]
particle-size: 38
particle-size: 38
statement: return this.data.length
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return r
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 114
particle-size: 114
particle-size: 114
statement: this.data = this.data ~ [x]
particle-size: 114
statement: return ()
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 114
particle-size: 114
statement: r := this.front()
particle-size: 114
particle-size: 114
statement: return this.data[0]
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: this.popFront()
particle-size: 114
particle-size: 114
statement: this.data = this.data[1..this.size()]
particle-size: 114
particle-size: 114
statement: return this.data.length
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: return ()
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: return r
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 342
particle-size: 342
particle-size: 342
statement: this.data = this.data ~ [x]
particle-size: 342
statement: return ()
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return ()
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
statement: if node == 3 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 956
particle-size: 956
statement: return this.data.length
particle-size: 956
particle-size: 956
particle-size: 956
particle-size: 956
statement: this.__S3.__run()
particle-size: 74
particle-size: 74
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 38
statement: this.Q_in.dupFront()
particle-size: 38
particle-size: 38
statement: this.pushFront(this.front())
particle-size: 38
particle-size: 38
statement: return this.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this.data = [x] ~ this.data
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 38
particle-size: 38
statement: r := this.front()
particle-size: 38
particle-size: 38
statement: return this.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this.popFront()
particle-size: 38
particle-size: 38
statement: this.data = this.data[1..this.size()]
particle-size: 38
particle-size: 38
statement: return this.data.length
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return r
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 114
particle-size: 114
particle-size: 114
statement: this.data = this.data ~ [x]
particle-size: 114
statement: return ()
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 114
particle-size: 114
statement: r := this.front()
particle-size: 114
particle-size: 114
statement: return this.data[0]
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: this.popFront()
particle-size: 114
particle-size: 114
statement: this.data = this.data[1..this.size()]
particle-size: 114
particle-size: 114
statement: return this.data.length
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: return ()
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
statement: return r
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 114
particle-size: 342
particle-size: 342
particle-size: 342
statement: this.data = this.data ~ [x]
particle-size: 342
statement: return ()
particle-size: 342
particle-size: 342
particle-size: 342
particle-size: 342
statement: return ()
particle-size: 378
particle-size: 378
particle-size: 378
particle-size: 378
statement: return ()
particle-size: 1755
particle-size: 1755
particle-size: 1755
particle-size: 1026
repetition: 7
statement: __d.__step()
particle-size: 1026
particle-size: 1026
statement: if this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 1 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 2 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 3 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: (action,node) := this.scheduler()
particle-size: 1026
particle-size: 1026
statement: actions := ([]: (R × R)[])
particle-size: 1026
statement: for i in [0..4){
    if (if i == 0 {
        this.__S0.Q_in;
    } else if i == 1 {
        this.__S1.Q_in;
    } else if i == 2 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__S0.Q_out;
    } else if i == 1 {
        this.__S1.Q_out;
    } else if i == 2 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 1026
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: actions ~= [(0,i)]
particle-size: 288
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
loop-index: 1
particle-size: 1026
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: actions ~= [(0,i)]
particle-size: 146
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: actions ~= [(1,i)]
particle-size: 618
loop-index: 2
particle-size: 1026
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: actions ~= [(0,i)]
particle-size: 146
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: actions ~= [(1,i)]
particle-size: 618
loop-index: 3
particle-size: 1026
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: actions ~= [(0,i)]
particle-size: 146
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1026
particle-size: 1026
statement: return this.data.length
particle-size: 1026
particle-size: 1026
particle-size: 1026
statement: actions ~= [(1,i)]
particle-size: 618
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 2580
particle-size: 2580
particle-size: 2580
particle-size: 2580
particle-size: 2580
particle-size: 2580
statement: if action {
    if node == 0 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 1 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 2 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 3 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1854
particle-size: 1854
statement: return this.data.length
particle-size: 1854
particle-size: 1854
particle-size: 1854
particle-size: 1854
statement: if node == 1 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1854
particle-size: 1854
statement: return this.data.length
particle-size: 1854
particle-size: 1854
particle-size: 1854
particle-size: 1854
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 618
particle-size: 618
statement: r := this.front()
particle-size: 618
particle-size: 618
statement: return this.data[0]
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: this.popFront()
particle-size: 618
particle-size: 618
statement: this.data = this.data[1..this.size()]
particle-size: 618
particle-size: 618
statement: return this.data.length
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: return ()
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: return r
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: if port == 1 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: this.__S2.Q_in.pushBack((pkt,3))
particle-size: 206
particle-size: 206
particle-size: 206
statement: this.data = this.data ~ [x]
particle-size: 206
statement: return ()
particle-size: 206
particle-size: 206
particle-size: 206
particle-size: 206
statement: if port == 2 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 206
particle-size: 206
particle-size: 206
statement: this.data = this.data ~ [x]
particle-size: 206
statement: return ()
particle-size: 206
particle-size: 206
particle-size: 206
particle-size: 206
statement: if port == 3 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 206
particle-size: 206
particle-size: 206
statement: this.data = this.data ~ [x]
particle-size: 206
statement: return ()
particle-size: 206
particle-size: 206
particle-size: 206
particle-size: 206
statement: if node == 2 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1854
particle-size: 1854
statement: return this.data.length
particle-size: 1854
particle-size: 1854
particle-size: 1854
particle-size: 1854
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 618
particle-size: 618
statement: r := this.front()
particle-size: 618
particle-size: 618
statement: return this.data[0]
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: this.popFront()
particle-size: 618
particle-size: 618
statement: this.data = this.data[1..this.size()]
particle-size: 618
particle-size: 618
statement: return this.data.length
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: return ()
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: return r
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: if port == 1 {
    this.__S3.Q_in.pushBack((pkt,3));
}
statement: this.__S3.Q_in.pushBack((pkt,3))
particle-size: 206
particle-size: 206
particle-size: 206
statement: this.data = this.data ~ [x]
particle-size: 206
statement: return ()
particle-size: 206
particle-size: 206
particle-size: 206
particle-size: 206
statement: if port == 2 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: this.__S0.Q_in.pushBack((pkt,2))
particle-size: 206
particle-size: 206
particle-size: 206
statement: this.data = this.data ~ [x]
particle-size: 206
statement: return ()
particle-size: 206
particle-size: 206
particle-size: 206
particle-size: 206
statement: if port == 3 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 206
particle-size: 206
particle-size: 206
statement: this.data = this.data ~ [x]
particle-size: 206
statement: return ()
particle-size: 206
particle-size: 206
particle-size: 206
particle-size: 206
statement: if node == 3 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1854
particle-size: 1854
statement: return this.data.length
particle-size: 1854
particle-size: 1854
particle-size: 1854
particle-size: 1854
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 618
particle-size: 618
statement: r := this.front()
particle-size: 618
particle-size: 618
statement: return this.data[0]
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: this.popFront()
particle-size: 618
particle-size: 618
statement: this.data = this.data[1..this.size()]
particle-size: 618
particle-size: 618
statement: return this.data.length
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: return ()
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: return r
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
particle-size: 618
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
particle-size: 206
particle-size: 206
particle-size: 206
statement: this.data = this.data ~ [x]
particle-size: 206
statement: return ()
particle-size: 206
particle-size: 206
particle-size: 206
particle-size: 206
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
particle-size: 206
particle-size: 206
particle-size: 206
statement: this.data = this.data ~ [x]
particle-size: 206
statement: return ()
particle-size: 206
particle-size: 206
particle-size: 206
particle-size: 206
statement: if port == 3 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
particle-size: 206
particle-size: 206
particle-size: 206
statement: this.data = this.data ~ [x]
particle-size: 206
statement: return ()
particle-size: 206
particle-size: 206
particle-size: 206
particle-size: 206
statement: if node == 0 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 726
particle-size: 726
statement: return this.data.length
particle-size: 726
particle-size: 726
particle-size: 726
particle-size: 726
statement: this.__S0.__run()
particle-size: 288
particle-size: 288
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.pushFront((Packet'(),0));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 288
particle-size: 288
particle-size: 288
particle-size: 288
statement: if node == 1 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 726
particle-size: 726
statement: return this.data.length
particle-size: 726
particle-size: 726
particle-size: 726
particle-size: 726
statement: this.__S1.__run()
particle-size: 146
particle-size: 146
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 56
statement: this.Q_in.dupFront()
particle-size: 56
particle-size: 56
statement: this.pushFront(this.front())
particle-size: 56
particle-size: 56
statement: return this.data[0]
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this.data = [x] ~ this.data
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 56
particle-size: 56
statement: r := this.front()
particle-size: 56
particle-size: 56
statement: return this.data[0]
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this.popFront()
particle-size: 56
particle-size: 56
statement: this.data = this.data[1..this.size()]
particle-size: 56
particle-size: 56
statement: return this.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return r
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 168
particle-size: 168
particle-size: 168
statement: this.data = this.data ~ [x]
particle-size: 168
statement: return ()
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 168
particle-size: 168
statement: r := this.front()
particle-size: 168
particle-size: 168
statement: return this.data[0]
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: this.popFront()
particle-size: 168
particle-size: 168
statement: this.data = this.data[1..this.size()]
particle-size: 168
particle-size: 168
statement: return this.data.length
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: return ()
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: return r
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 504
particle-size: 504
particle-size: 504
statement: this.data = this.data ~ [x]
particle-size: 504
statement: return ()
particle-size: 504
particle-size: 504
particle-size: 504
particle-size: 504
statement: return ()
particle-size: 594
particle-size: 594
particle-size: 594
particle-size: 594
statement: if node == 2 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 1174
particle-size: 1174
statement: return this.data.length
particle-size: 1174
particle-size: 1174
particle-size: 1174
particle-size: 1174
statement: this.__S2.__run()
particle-size: 146
particle-size: 146
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 56
statement: this.Q_in.dupFront()
particle-size: 56
particle-size: 56
statement: this.pushFront(this.front())
particle-size: 56
particle-size: 56
statement: return this.data[0]
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this.data = [x] ~ this.data
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 56
particle-size: 56
statement: r := this.front()
particle-size: 56
particle-size: 56
statement: return this.data[0]
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this.popFront()
particle-size: 56
particle-size: 56
statement: this.data = this.data[1..this.size()]
particle-size: 56
particle-size: 56
statement: return this.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return r
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 168
particle-size: 168
particle-size: 168
statement: this.data = this.data ~ [x]
particle-size: 168
statement: return ()
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 168
particle-size: 168
statement: r := this.front()
particle-size: 168
particle-size: 168
statement: return this.data[0]
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: this.popFront()
particle-size: 168
particle-size: 168
statement: this.data = this.data[1..this.size()]
particle-size: 168
particle-size: 168
statement: return this.data.length
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: return ()
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: return r
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 504
particle-size: 504
particle-size: 504
statement: this.data = this.data ~ [x]
particle-size: 504
statement: return ()
particle-size: 504
particle-size: 504
particle-size: 504
particle-size: 504
statement: return ()
particle-size: 594
particle-size: 594
particle-size: 594
particle-size: 594
statement: if node == 3 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 1622
particle-size: 1622
statement: return this.data.length
particle-size: 1622
particle-size: 1622
particle-size: 1622
particle-size: 1622
statement: this.__S3.__run()
particle-size: 146
particle-size: 146
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 56
statement: this.Q_in.dupFront()
particle-size: 56
particle-size: 56
statement: this.pushFront(this.front())
particle-size: 56
particle-size: 56
statement: return this.data[0]
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this.data = [x] ~ this.data
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 56
particle-size: 56
statement: r := this.front()
particle-size: 56
particle-size: 56
statement: return this.data[0]
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this.popFront()
particle-size: 56
particle-size: 56
statement: this.data = this.data[1..this.size()]
particle-size: 56
particle-size: 56
statement: return this.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return r
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 168
particle-size: 168
particle-size: 168
statement: this.data = this.data ~ [x]
particle-size: 168
statement: return ()
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 168
particle-size: 168
statement: r := this.front()
particle-size: 168
particle-size: 168
statement: return this.data[0]
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: this.popFront()
particle-size: 168
particle-size: 168
statement: this.data = this.data[1..this.size()]
particle-size: 168
particle-size: 168
statement: return this.data.length
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: return ()
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
statement: return r
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 168
particle-size: 504
particle-size: 504
particle-size: 504
statement: this.data = this.data ~ [x]
particle-size: 504
statement: return ()
particle-size: 504
particle-size: 504
particle-size: 504
particle-size: 504
statement: return ()
particle-size: 594
particle-size: 594
particle-size: 594
particle-size: 594
statement: return ()
particle-size: 3924
particle-size: 3852
particle-size: 3852
particle-size: 1857
repetition: 8
statement: __d.__step()
particle-size: 1857
particle-size: 1857
statement: if this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 1 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 2 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 3 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: (action,node) := this.scheduler()
particle-size: 1857
particle-size: 1857
statement: actions := ([]: (R × R)[])
particle-size: 1857
statement: for i in [0..4){
    if (if i == 0 {
        this.__S0.Q_in;
    } else if i == 1 {
        this.__S1.Q_in;
    } else if i == 2 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__S0.Q_out;
    } else if i == 1 {
        this.__S1.Q_out;
    } else if i == 2 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 1857
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: actions ~= [(0,i)]
particle-size: 795
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
loop-index: 1
particle-size: 1857
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: actions ~= [(0,i)]
particle-size: 466
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: actions ~= [(1,i)]
particle-size: 1086
loop-index: 2
particle-size: 1857
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: actions ~= [(0,i)]
particle-size: 466
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: actions ~= [(1,i)]
particle-size: 1086
loop-index: 3
particle-size: 1857
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: actions ~= [(0,i)]
particle-size: 466
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1857
particle-size: 1857
statement: return this.data.length
particle-size: 1857
particle-size: 1857
particle-size: 1857
statement: actions ~= [(1,i)]
particle-size: 1086
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 5451
particle-size: 5451
particle-size: 5451
particle-size: 5451
particle-size: 5451
particle-size: 5451
statement: if action {
    if node == 0 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 1 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 2 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 3 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3258
particle-size: 3258
statement: return this.data.length
particle-size: 3258
particle-size: 3258
particle-size: 3258
particle-size: 3258
statement: if node == 1 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3258
particle-size: 3258
statement: return this.data.length
particle-size: 3258
particle-size: 3258
particle-size: 3258
particle-size: 3258
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 1086
particle-size: 1086
statement: r := this.front()
particle-size: 1086
particle-size: 1086
statement: return this.data[0]
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: this.popFront()
particle-size: 1086
particle-size: 1086
statement: this.data = this.data[1..this.size()]
particle-size: 1086
particle-size: 1086
statement: return this.data.length
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: return ()
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: return r
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: if port == 1 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: this.__S2.Q_in.pushBack((pkt,3))
particle-size: 362
particle-size: 362
particle-size: 362
statement: this.data = this.data ~ [x]
particle-size: 362
statement: return ()
particle-size: 362
particle-size: 362
particle-size: 362
particle-size: 362
statement: if port == 2 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 362
particle-size: 362
particle-size: 362
statement: this.data = this.data ~ [x]
particle-size: 362
statement: return ()
particle-size: 362
particle-size: 362
particle-size: 362
particle-size: 362
statement: if port == 3 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 362
particle-size: 362
particle-size: 362
statement: this.data = this.data ~ [x]
particle-size: 362
statement: return ()
particle-size: 362
particle-size: 362
particle-size: 362
particle-size: 362
statement: if node == 2 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3258
particle-size: 3258
statement: return this.data.length
particle-size: 3258
particle-size: 3258
particle-size: 3258
particle-size: 3258
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 1086
particle-size: 1086
statement: r := this.front()
particle-size: 1086
particle-size: 1086
statement: return this.data[0]
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: this.popFront()
particle-size: 1086
particle-size: 1086
statement: this.data = this.data[1..this.size()]
particle-size: 1086
particle-size: 1086
statement: return this.data.length
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: return ()
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: return r
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: if port == 1 {
    this.__S3.Q_in.pushBack((pkt,3));
}
statement: this.__S3.Q_in.pushBack((pkt,3))
particle-size: 362
particle-size: 362
particle-size: 362
statement: this.data = this.data ~ [x]
particle-size: 362
statement: return ()
particle-size: 362
particle-size: 362
particle-size: 362
particle-size: 362
statement: if port == 2 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: this.__S0.Q_in.pushBack((pkt,2))
particle-size: 362
particle-size: 362
particle-size: 362
statement: this.data = this.data ~ [x]
particle-size: 362
statement: return ()
particle-size: 362
particle-size: 362
particle-size: 362
particle-size: 362
statement: if port == 3 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 362
particle-size: 362
particle-size: 362
statement: this.data = this.data ~ [x]
particle-size: 362
statement: return ()
particle-size: 362
particle-size: 362
particle-size: 362
particle-size: 362
statement: if node == 3 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 3258
particle-size: 3258
statement: return this.data.length
particle-size: 3258
particle-size: 3258
particle-size: 3258
particle-size: 3258
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 1086
particle-size: 1086
statement: r := this.front()
particle-size: 1086
particle-size: 1086
statement: return this.data[0]
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: this.popFront()
particle-size: 1086
particle-size: 1086
statement: this.data = this.data[1..this.size()]
particle-size: 1086
particle-size: 1086
statement: return this.data.length
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: return ()
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: return r
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
particle-size: 1086
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
particle-size: 362
particle-size: 362
particle-size: 362
statement: this.data = this.data ~ [x]
particle-size: 362
statement: return ()
particle-size: 362
particle-size: 362
particle-size: 362
particle-size: 362
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
particle-size: 362
particle-size: 362
particle-size: 362
statement: this.data = this.data ~ [x]
particle-size: 362
statement: return ()
particle-size: 362
particle-size: 362
particle-size: 362
particle-size: 362
statement: if port == 3 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
particle-size: 362
particle-size: 362
particle-size: 362
statement: this.data = this.data ~ [x]
particle-size: 362
statement: return ()
particle-size: 362
particle-size: 362
particle-size: 362
particle-size: 362
statement: if node == 0 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 2193
particle-size: 2193
statement: return this.data.length
particle-size: 2193
particle-size: 2193
particle-size: 2193
particle-size: 2193
statement: this.__S0.__run()
particle-size: 795
particle-size: 795
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.pushFront((Packet'(),0));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 795
particle-size: 795
particle-size: 795
particle-size: 795
statement: if node == 1 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 2193
particle-size: 2193
statement: return this.data.length
particle-size: 2193
particle-size: 2193
particle-size: 2193
particle-size: 2193
statement: this.__S1.__run()
particle-size: 466
particle-size: 466
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 72
statement: this.Q_in.dupFront()
particle-size: 72
particle-size: 72
statement: this.pushFront(this.front())
particle-size: 72
particle-size: 72
statement: return this.data[0]
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this.data = [x] ~ this.data
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 72
particle-size: 72
statement: r := this.front()
particle-size: 72
particle-size: 72
statement: return this.data[0]
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this.popFront()
particle-size: 72
particle-size: 72
statement: this.data = this.data[1..this.size()]
particle-size: 72
particle-size: 72
statement: return this.data.length
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return r
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 216
particle-size: 216
particle-size: 216
statement: this.data = this.data ~ [x]
particle-size: 216
statement: return ()
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 216
particle-size: 216
statement: r := this.front()
particle-size: 216
particle-size: 216
statement: return this.data[0]
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: this.popFront()
particle-size: 216
particle-size: 216
statement: this.data = this.data[1..this.size()]
particle-size: 216
particle-size: 216
statement: return this.data.length
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: return ()
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: return r
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 648
particle-size: 648
particle-size: 648
statement: this.data = this.data ~ [x]
particle-size: 648
statement: return ()
particle-size: 648
particle-size: 648
particle-size: 648
particle-size: 648
statement: return ()
particle-size: 1042
particle-size: 1042
particle-size: 1042
particle-size: 1042
statement: if node == 2 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 2769
particle-size: 2769
statement: return this.data.length
particle-size: 2769
particle-size: 2769
particle-size: 2769
particle-size: 2769
statement: this.__S2.__run()
particle-size: 466
particle-size: 466
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 72
statement: this.Q_in.dupFront()
particle-size: 72
particle-size: 72
statement: this.pushFront(this.front())
particle-size: 72
particle-size: 72
statement: return this.data[0]
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this.data = [x] ~ this.data
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 72
particle-size: 72
statement: r := this.front()
particle-size: 72
particle-size: 72
statement: return this.data[0]
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this.popFront()
particle-size: 72
particle-size: 72
statement: this.data = this.data[1..this.size()]
particle-size: 72
particle-size: 72
statement: return this.data.length
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return r
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 216
particle-size: 216
particle-size: 216
statement: this.data = this.data ~ [x]
particle-size: 216
statement: return ()
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 216
particle-size: 216
statement: r := this.front()
particle-size: 216
particle-size: 216
statement: return this.data[0]
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: this.popFront()
particle-size: 216
particle-size: 216
statement: this.data = this.data[1..this.size()]
particle-size: 216
particle-size: 216
statement: return this.data.length
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: return ()
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: return r
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 648
particle-size: 648
particle-size: 648
statement: this.data = this.data ~ [x]
particle-size: 648
statement: return ()
particle-size: 648
particle-size: 648
particle-size: 648
particle-size: 648
statement: return ()
particle-size: 1042
particle-size: 1042
particle-size: 1042
particle-size: 1042
statement: if node == 3 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 3345
particle-size: 3345
statement: return this.data.length
particle-size: 3345
particle-size: 3345
particle-size: 3345
particle-size: 3345
statement: this.__S3.__run()
particle-size: 466
particle-size: 466
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 72
statement: this.Q_in.dupFront()
particle-size: 72
particle-size: 72
statement: this.pushFront(this.front())
particle-size: 72
particle-size: 72
statement: return this.data[0]
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this.data = [x] ~ this.data
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 72
particle-size: 72
statement: r := this.front()
particle-size: 72
particle-size: 72
statement: return this.data[0]
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this.popFront()
particle-size: 72
particle-size: 72
statement: this.data = this.data[1..this.size()]
particle-size: 72
particle-size: 72
statement: return this.data.length
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return r
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 216
particle-size: 216
particle-size: 216
statement: this.data = this.data ~ [x]
particle-size: 216
statement: return ()
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 216
particle-size: 216
statement: r := this.front()
particle-size: 216
particle-size: 216
statement: return this.data[0]
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: this.popFront()
particle-size: 216
particle-size: 216
statement: this.data = this.data[1..this.size()]
particle-size: 216
particle-size: 216
statement: return this.data.length
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: return ()
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
statement: return r
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 216
particle-size: 648
particle-size: 648
particle-size: 648
statement: this.data = this.data ~ [x]
particle-size: 648
statement: return ()
particle-size: 648
particle-size: 648
particle-size: 648
particle-size: 648
statement: return ()
particle-size: 1042
particle-size: 1042
particle-size: 1042
particle-size: 1042
statement: return ()
particle-size: 7179
particle-size: 7041
particle-size: 7041
particle-size: 3621
repetition: 9
statement: __d.__step()
particle-size: 3621
particle-size: 3621
statement: if this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 1 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 2 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 3 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: (action,node) := this.scheduler()
particle-size: 3621
particle-size: 3621
statement: actions := ([]: (R × R)[])
particle-size: 3621
statement: for i in [0..4){
    if (if i == 0 {
        this.__S0.Q_in;
    } else if i == 1 {
        this.__S1.Q_in;
    } else if i == 2 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__S0.Q_out;
    } else if i == 1 {
        this.__S1.Q_out;
    } else if i == 2 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 3621
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: actions ~= [(0,i)]
particle-size: 1686
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
loop-index: 1
particle-size: 3621
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: actions ~= [(0,i)]
particle-size: 1090
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: actions ~= [(1,i)]
particle-size: 2031
loop-index: 2
particle-size: 3621
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: actions ~= [(0,i)]
particle-size: 1090
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: actions ~= [(1,i)]
particle-size: 2031
loop-index: 3
particle-size: 3621
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: actions ~= [(0,i)]
particle-size: 1090
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 3621
particle-size: 3621
statement: return this.data.length
particle-size: 3621
particle-size: 3621
particle-size: 3621
statement: actions ~= [(1,i)]
particle-size: 2031
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 11049
particle-size: 11049
particle-size: 11049
particle-size: 11049
particle-size: 11049
particle-size: 11049
statement: if action {
    if node == 0 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 1 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 2 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 3 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 6093
particle-size: 6093
statement: return this.data.length
particle-size: 6093
particle-size: 6093
particle-size: 6093
particle-size: 6093
statement: if node == 1 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 6093
particle-size: 6093
statement: return this.data.length
particle-size: 6093
particle-size: 6093
particle-size: 6093
particle-size: 6093
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 2031
particle-size: 2031
statement: r := this.front()
particle-size: 2031
particle-size: 2031
statement: return this.data[0]
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: this.popFront()
particle-size: 2031
particle-size: 2031
statement: this.data = this.data[1..this.size()]
particle-size: 2031
particle-size: 2031
statement: return this.data.length
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: return ()
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: return r
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: if port == 1 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: this.__S2.Q_in.pushBack((pkt,3))
particle-size: 677
particle-size: 677
particle-size: 677
statement: this.data = this.data ~ [x]
particle-size: 677
statement: return ()
particle-size: 677
particle-size: 677
particle-size: 677
particle-size: 677
statement: if port == 2 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 677
particle-size: 677
particle-size: 677
statement: this.data = this.data ~ [x]
particle-size: 677
statement: return ()
particle-size: 677
particle-size: 677
particle-size: 677
particle-size: 677
statement: if port == 3 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 677
particle-size: 677
particle-size: 677
statement: this.data = this.data ~ [x]
particle-size: 677
statement: return ()
particle-size: 677
particle-size: 677
particle-size: 677
particle-size: 677
statement: if node == 2 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 6093
particle-size: 6093
statement: return this.data.length
particle-size: 6093
particle-size: 6093
particle-size: 6093
particle-size: 6093
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 2031
particle-size: 2031
statement: r := this.front()
particle-size: 2031
particle-size: 2031
statement: return this.data[0]
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: this.popFront()
particle-size: 2031
particle-size: 2031
statement: this.data = this.data[1..this.size()]
particle-size: 2031
particle-size: 2031
statement: return this.data.length
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: return ()
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: return r
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: if port == 1 {
    this.__S3.Q_in.pushBack((pkt,3));
}
statement: this.__S3.Q_in.pushBack((pkt,3))
particle-size: 677
particle-size: 677
particle-size: 677
statement: this.data = this.data ~ [x]
particle-size: 677
statement: return ()
particle-size: 677
particle-size: 677
particle-size: 677
particle-size: 677
statement: if port == 2 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: this.__S0.Q_in.pushBack((pkt,2))
particle-size: 677
particle-size: 677
particle-size: 677
statement: this.data = this.data ~ [x]
particle-size: 677
statement: return ()
particle-size: 677
particle-size: 677
particle-size: 677
particle-size: 677
statement: if port == 3 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 677
particle-size: 677
particle-size: 677
statement: this.data = this.data ~ [x]
particle-size: 677
statement: return ()
particle-size: 677
particle-size: 677
particle-size: 677
particle-size: 677
statement: if node == 3 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 6093
particle-size: 6093
statement: return this.data.length
particle-size: 6093
particle-size: 6093
particle-size: 6093
particle-size: 6093
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 2031
particle-size: 2031
statement: r := this.front()
particle-size: 2031
particle-size: 2031
statement: return this.data[0]
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: this.popFront()
particle-size: 2031
particle-size: 2031
statement: this.data = this.data[1..this.size()]
particle-size: 2031
particle-size: 2031
statement: return this.data.length
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: return ()
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: return r
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
particle-size: 2031
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
particle-size: 677
particle-size: 677
particle-size: 677
statement: this.data = this.data ~ [x]
particle-size: 677
statement: return ()
particle-size: 677
particle-size: 677
particle-size: 677
particle-size: 677
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
particle-size: 677
particle-size: 677
particle-size: 677
statement: this.data = this.data ~ [x]
particle-size: 677
statement: return ()
particle-size: 677
particle-size: 677
particle-size: 677
particle-size: 677
statement: if port == 3 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
particle-size: 677
particle-size: 677
particle-size: 677
statement: this.data = this.data ~ [x]
particle-size: 677
statement: return ()
particle-size: 677
particle-size: 677
particle-size: 677
particle-size: 677
statement: if node == 0 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 4956
particle-size: 4956
statement: return this.data.length
particle-size: 4956
particle-size: 4956
particle-size: 4956
particle-size: 4956
statement: this.__S0.__run()
particle-size: 1686
particle-size: 1686
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.pushFront((Packet'(),0));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 1686
particle-size: 1686
particle-size: 1686
particle-size: 1686
statement: if node == 1 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 4956
particle-size: 4956
statement: return this.data.length
particle-size: 4956
particle-size: 4956
particle-size: 4956
particle-size: 4956
statement: this.__S1.__run()
particle-size: 1090
particle-size: 1090
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 66
statement: this.Q_in.dupFront()
particle-size: 66
particle-size: 66
statement: this.pushFront(this.front())
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.data = [x] ~ this.data
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 66
particle-size: 66
statement: r := this.front()
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.popFront()
particle-size: 66
particle-size: 66
statement: this.data = this.data[1..this.size()]
particle-size: 66
particle-size: 66
statement: return this.data.length
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return r
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.data = this.data ~ [x]
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 198
particle-size: 198
statement: r := this.front()
particle-size: 198
particle-size: 198
statement: return this.data[0]
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.popFront()
particle-size: 198
particle-size: 198
statement: this.data = this.data[1..this.size()]
particle-size: 198
particle-size: 198
statement: return this.data.length
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return r
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 594
particle-size: 594
particle-size: 594
statement: this.data = this.data ~ [x]
particle-size: 594
statement: return ()
particle-size: 594
particle-size: 594
particle-size: 594
particle-size: 594
statement: return ()
particle-size: 1618
particle-size: 1618
particle-size: 1618
particle-size: 1618
statement: if node == 2 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 5484
particle-size: 5484
statement: return this.data.length
particle-size: 5484
particle-size: 5484
particle-size: 5484
particle-size: 5484
statement: this.__S2.__run()
particle-size: 1090
particle-size: 1090
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 66
statement: this.Q_in.dupFront()
particle-size: 66
particle-size: 66
statement: this.pushFront(this.front())
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.data = [x] ~ this.data
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 66
particle-size: 66
statement: r := this.front()
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.popFront()
particle-size: 66
particle-size: 66
statement: this.data = this.data[1..this.size()]
particle-size: 66
particle-size: 66
statement: return this.data.length
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return r
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.data = this.data ~ [x]
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 198
particle-size: 198
statement: r := this.front()
particle-size: 198
particle-size: 198
statement: return this.data[0]
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.popFront()
particle-size: 198
particle-size: 198
statement: this.data = this.data[1..this.size()]
particle-size: 198
particle-size: 198
statement: return this.data.length
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return r
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 594
particle-size: 594
particle-size: 594
statement: this.data = this.data ~ [x]
particle-size: 594
statement: return ()
particle-size: 594
particle-size: 594
particle-size: 594
particle-size: 594
statement: return ()
particle-size: 1618
particle-size: 1618
particle-size: 1618
particle-size: 1618
statement: if node == 3 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 6012
particle-size: 6012
statement: return this.data.length
particle-size: 6012
particle-size: 6012
particle-size: 6012
particle-size: 6012
statement: this.__S3.__run()
particle-size: 1090
particle-size: 1090
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 66
statement: this.Q_in.dupFront()
particle-size: 66
particle-size: 66
statement: this.pushFront(this.front())
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.data = [x] ~ this.data
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 66
particle-size: 66
statement: r := this.front()
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.popFront()
particle-size: 66
particle-size: 66
statement: this.data = this.data[1..this.size()]
particle-size: 66
particle-size: 66
statement: return this.data.length
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return r
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.data = this.data ~ [x]
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 198
particle-size: 198
statement: r := this.front()
particle-size: 198
particle-size: 198
statement: return this.data[0]
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.popFront()
particle-size: 198
particle-size: 198
statement: this.data = this.data[1..this.size()]
particle-size: 198
particle-size: 198
statement: return this.data.length
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return r
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 594
particle-size: 594
particle-size: 594
statement: this.data = this.data ~ [x]
particle-size: 594
statement: return ()
particle-size: 594
particle-size: 594
particle-size: 594
particle-size: 594
statement: return ()
particle-size: 1618
particle-size: 1618
particle-size: 1618
particle-size: 1618
statement: return ()
particle-size: 12633
particle-size: 11496
particle-size: 11496
particle-size: 5088
repetition: 10
statement: __d.__step()
particle-size: 5088
particle-size: 5088
statement: if this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 1 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 2 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 3 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: (action,node) := this.scheduler()
particle-size: 5088
particle-size: 5088
statement: actions := ([]: (R × R)[])
particle-size: 5088
statement: for i in [0..4){
    if (if i == 0 {
        this.__S0.Q_in;
    } else if i == 1 {
        this.__S1.Q_in;
    } else if i == 2 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__S0.Q_out;
    } else if i == 1 {
        this.__S1.Q_out;
    } else if i == 2 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 5088
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: actions ~= [(0,i)]
particle-size: 2631
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
loop-index: 1
particle-size: 5088
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: actions ~= [(0,i)]
particle-size: 1756
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: actions ~= [(1,i)]
particle-size: 2520
loop-index: 2
particle-size: 5088
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: actions ~= [(0,i)]
particle-size: 1756
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: actions ~= [(1,i)]
particle-size: 2520
loop-index: 3
particle-size: 5088
statement: if (if i == 0 {
    this.__S0.Q_in;
} else if i == 1 {
    this.__S1.Q_in;
} else if i == 2 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: actions ~= [(0,i)]
particle-size: 1756
statement: if (if i == 0 {
    this.__S0.Q_out;
} else if i == 1 {
    this.__S1.Q_out;
} else if i == 2 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 5088
particle-size: 5088
statement: return this.data.length
particle-size: 5088
particle-size: 5088
particle-size: 5088
statement: actions ~= [(1,i)]
particle-size: 2520
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 15459
particle-size: 15459
particle-size: 15459
particle-size: 15459
particle-size: 15459
particle-size: 15459
statement: if action {
    if node == 0 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__S1.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 2 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 1 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 2 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 3 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__S1.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
}
particle-size: 7560
particle-size: 7560
statement: return this.data.length
particle-size: 7560
particle-size: 7560
particle-size: 7560
particle-size: 7560
statement: if node == 1 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 7560
particle-size: 7560
statement: return this.data.length
particle-size: 7560
particle-size: 7560
particle-size: 7560
particle-size: 7560
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 2520
particle-size: 2520
statement: r := this.front()
particle-size: 2520
particle-size: 2520
statement: return this.data[0]
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: this.popFront()
particle-size: 2520
particle-size: 2520
statement: this.data = this.data[1..this.size()]
particle-size: 2520
particle-size: 2520
statement: return this.data.length
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: return ()
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: return r
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: if port == 1 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: this.__S2.Q_in.pushBack((pkt,3))
particle-size: 840
particle-size: 840
particle-size: 840
statement: this.data = this.data ~ [x]
particle-size: 840
statement: return ()
particle-size: 840
particle-size: 840
particle-size: 840
particle-size: 840
statement: if port == 2 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 840
particle-size: 840
particle-size: 840
statement: this.data = this.data ~ [x]
particle-size: 840
statement: return ()
particle-size: 840
particle-size: 840
particle-size: 840
particle-size: 840
statement: if port == 3 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 840
particle-size: 840
particle-size: 840
statement: this.data = this.data ~ [x]
particle-size: 840
statement: return ()
particle-size: 840
particle-size: 840
particle-size: 840
particle-size: 840
statement: if node == 2 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 7560
particle-size: 7560
statement: return this.data.length
particle-size: 7560
particle-size: 7560
particle-size: 7560
particle-size: 7560
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 2520
particle-size: 2520
statement: r := this.front()
particle-size: 2520
particle-size: 2520
statement: return this.data[0]
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: this.popFront()
particle-size: 2520
particle-size: 2520
statement: this.data = this.data[1..this.size()]
particle-size: 2520
particle-size: 2520
statement: return this.data.length
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: return ()
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: return r
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: if port == 1 {
    this.__S3.Q_in.pushBack((pkt,3));
}
statement: this.__S3.Q_in.pushBack((pkt,3))
particle-size: 840
particle-size: 840
particle-size: 840
statement: this.data = this.data ~ [x]
particle-size: 840
statement: return ()
particle-size: 840
particle-size: 840
particle-size: 840
particle-size: 840
statement: if port == 2 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: this.__S0.Q_in.pushBack((pkt,2))
particle-size: 840
particle-size: 840
particle-size: 840
statement: this.data = this.data ~ [x]
particle-size: 840
statement: return ()
particle-size: 840
particle-size: 840
particle-size: 840
particle-size: 840
statement: if port == 3 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 840
particle-size: 840
particle-size: 840
statement: this.data = this.data ~ [x]
particle-size: 840
statement: return ()
particle-size: 840
particle-size: 840
particle-size: 840
particle-size: 840
statement: if node == 3 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 7560
particle-size: 7560
statement: return this.data.length
particle-size: 7560
particle-size: 7560
particle-size: 7560
particle-size: 7560
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 2520
particle-size: 2520
statement: r := this.front()
particle-size: 2520
particle-size: 2520
statement: return this.data[0]
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: this.popFront()
particle-size: 2520
particle-size: 2520
statement: this.data = this.data[1..this.size()]
particle-size: 2520
particle-size: 2520
statement: return this.data.length
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: return ()
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: return r
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
particle-size: 2520
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: this.__S0.Q_in.pushBack((pkt,3))
particle-size: 840
particle-size: 840
particle-size: 840
statement: this.data = this.data ~ [x]
particle-size: 840
statement: return ()
particle-size: 840
particle-size: 840
particle-size: 840
particle-size: 840
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: this.__S1.Q_in.pushBack((pkt,2))
particle-size: 840
particle-size: 840
particle-size: 840
statement: this.data = this.data ~ [x]
particle-size: 840
statement: return ()
particle-size: 840
particle-size: 840
particle-size: 840
particle-size: 840
statement: if port == 3 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: this.__S2.Q_in.pushBack((pkt,1))
particle-size: 840
particle-size: 840
particle-size: 840
statement: this.data = this.data ~ [x]
particle-size: 840
statement: return ()
particle-size: 840
particle-size: 840
particle-size: 840
particle-size: 840
statement: if node == 0 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 7899
particle-size: 7899
statement: return this.data.length
particle-size: 7899
particle-size: 7899
particle-size: 7899
particle-size: 7899
statement: this.__S0.__run()
particle-size: 2631
particle-size: 2631
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.pushFront((Packet'(),0));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: return ()
particle-size: 2631
particle-size: 2631
particle-size: 2631
particle-size: 2631
statement: if node == 1 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 7899
particle-size: 7899
statement: return this.data.length
particle-size: 7899
particle-size: 7899
particle-size: 7899
particle-size: 7899
statement: this.__S1.__run()
particle-size: 1756
particle-size: 1756
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 66
statement: this.Q_in.dupFront()
particle-size: 66
particle-size: 66
statement: this.pushFront(this.front())
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.data = [x] ~ this.data
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 66
particle-size: 66
statement: r := this.front()
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.popFront()
particle-size: 66
particle-size: 66
statement: this.data = this.data[1..this.size()]
particle-size: 66
particle-size: 66
statement: return this.data.length
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return r
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.data = this.data ~ [x]
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 198
particle-size: 198
statement: r := this.front()
particle-size: 198
particle-size: 198
statement: return this.data[0]
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.popFront()
particle-size: 198
particle-size: 198
statement: this.data = this.data[1..this.size()]
particle-size: 198
particle-size: 198
statement: return this.data.length
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return r
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 594
particle-size: 594
particle-size: 594
statement: this.data = this.data ~ [x]
particle-size: 594
statement: return ()
particle-size: 594
particle-size: 594
particle-size: 594
particle-size: 594
statement: return ()
particle-size: 2284
particle-size: 2284
particle-size: 2284
particle-size: 2284
statement: if node == 2 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 8427
particle-size: 8427
statement: return this.data.length
particle-size: 8427
particle-size: 8427
particle-size: 8427
particle-size: 8427
statement: this.__S2.__run()
particle-size: 1756
particle-size: 1756
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 66
statement: this.Q_in.dupFront()
particle-size: 66
particle-size: 66
statement: this.pushFront(this.front())
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.data = [x] ~ this.data
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 66
particle-size: 66
statement: r := this.front()
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.popFront()
particle-size: 66
particle-size: 66
statement: this.data = this.data[1..this.size()]
particle-size: 66
particle-size: 66
statement: return this.data.length
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return r
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.data = this.data ~ [x]
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 198
particle-size: 198
statement: r := this.front()
particle-size: 198
particle-size: 198
statement: return this.data[0]
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.popFront()
particle-size: 198
particle-size: 198
statement: this.data = this.data[1..this.size()]
particle-size: 198
particle-size: 198
statement: return this.data.length
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return r
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 594
particle-size: 594
particle-size: 594
statement: this.data = this.data ~ [x]
particle-size: 594
statement: return ()
particle-size: 594
particle-size: 594
particle-size: 594
particle-size: 594
statement: return ()
particle-size: 2284
particle-size: 2284
particle-size: 2284
particle-size: 2284
statement: if node == 3 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 8955
particle-size: 8955
statement: return this.data.length
particle-size: 8955
particle-size: 8955
particle-size: 8955
particle-size: 8955
statement: this.__S3.__run()
particle-size: 1756
particle-size: 1756
statement: if this.infected == 0 {
    this.infected = 1;
    this.Q_in.dupFront();
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
    this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)));
}
statement: this.infected = 1
particle-size: 66
statement: this.Q_in.dupFront()
particle-size: 66
particle-size: 66
statement: this.pushFront(this.front())
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.data = [x] ~ this.data
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 66
particle-size: 66
statement: r := this.front()
particle-size: 66
particle-size: 66
statement: return this.data[0]
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: this.popFront()
particle-size: 66
particle-size: 66
statement: this.data = this.data[1..this.size()]
particle-size: 66
particle-size: 66
statement: return this.data.length
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return ()
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
statement: return r
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 66
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.data = this.data ~ [x]
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],uniformInt(1,3)))
particle-size: 198
particle-size: 198
statement: r := this.front()
particle-size: 198
particle-size: 198
statement: return this.data[0]
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: this.popFront()
particle-size: 198
particle-size: 198
statement: this.data = this.data[1..this.size()]
particle-size: 198
particle-size: 198
statement: return this.data.length
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return ()
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
statement: return r
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 198
particle-size: 594
particle-size: 594
particle-size: 594
statement: this.data = this.data ~ [x]
particle-size: 594
statement: return ()
particle-size: 594
particle-size: 594
particle-size: 594
particle-size: 594
statement: return ()
particle-size: 2284
particle-size: 2284
particle-size: 2284
particle-size: 2284
statement: return ()
particle-size: 17043
particle-size: 14430
particle-size: 14430
particle-size: 5754
repetition: 11
statement: __d.__step()
particle-size: 5754
particle-size: 5754
statement: if this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__S1.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 2 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 1 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 2 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 3 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 5754
particle-size: 5754
statement: return this.data.length
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
statement: return this.data.length
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
statement: return this.data.length
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
statement: return this.data.length
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
statement: return this.data.length
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
statement: return this.data.length
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
statement: return this.data.length
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
statement: return this.data.length
particle-size: 5754
particle-size: 5754
particle-size: 5754
particle-size: 5754
statement: (actio