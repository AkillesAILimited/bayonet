statement: __d := __D'()
particle-size: 1
particle-size: 1
statement: this.__H0 = __h0_ty'() , this.__H1 = __h1_ty'() , this.__S0 = __s0_ty'() , this.__S1 = __s1_ty'() , this.__S2 = __s2_ty'() , this.__S3 = __s3_ty'()
statement: this.__H0 = __h0_ty'() , this.__H1 = __h1_ty'() , this.__S0 = __s0_ty'() , this.__S1 = __s1_ty'() , this.__S2 = __s2_ty'()
statement: this.__H0 = __h0_ty'() , this.__H1 = __h1_ty'() , this.__S0 = __s0_ty'() , this.__S1 = __s1_ty'()
statement: this.__H0 = __h0_ty'() , this.__H1 = __h1_ty'() , this.__S0 = __s0_ty'()
statement: this.__H0 = __h0_ty'() , this.__H1 = __h1_ty'()
statement: this.__H0 = __h0_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.pkt_count = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__H1 = __h1_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.pkt_count = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S0 = __s0_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.route1 = 0
particle-size: 1
statement: this.route2 = 0
particle-size: 1
statement: this.route3 = 0
particle-size: 1
statement: this.shortest1 = 0
particle-size: 1
statement: this.shortest2 = 0
particle-size: 1
statement: this.shortest3 = 0
particle-size: 1
statement: this.nshortest = 0
particle-size: 1
statement: this.which = 0
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S1 = __s1_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S2 = __s2_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__S3 = __s3_ty'()
particle-size: 1
particle-size: 1
statement: this.Q_in = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out = Queue'()
particle-size: 1
particle-size: 1
statement: this.data = ([]: (Packet × ℝ)[])
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
statement: __d.__H0.__run()
particle-size: 1
particle-size: 1
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = [x] ~ this.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = [x] ~ this.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.pkt_count = this.pkt_count + 1
particle-size: 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: repeat 30 {
    __d.__step();
}
repetition: 1
statement: __d.__step()
particle-size: 1
particle-size: 1
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: (action,node) := this.scheduler()
particle-size: 1
particle-size: 1
statement: actions := ([]: (R × R)[])
particle-size: 1
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: actions ~= [(1,i)]
particle-size: 1
loop-index: 1
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
loop-index: 2
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
loop-index: 3
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
loop-index: 4
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
loop-index: 5
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.__H0.__run()
particle-size: 1
particle-size: 1
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = [x] ~ this.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 1
particle-size: 1
statement: return this
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = [x] ~ this.data
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.pkt_count = this.pkt_count + 1
particle-size: 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
repetition: 2
statement: __d.__step()
particle-size: 2
particle-size: 2
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: (action,node) := this.scheduler()
particle-size: 2
particle-size: 2
statement: actions := ([]: (R × R)[])
particle-size: 2
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 2
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: actions ~= [(0,i)]
particle-size: 2
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: actions ~= [(1,i)]
particle-size: 1
loop-index: 1
particle-size: 2
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 2
particle-size: 2
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 3
particle-size: 2
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 4
particle-size: 2
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
loop-index: 5
particle-size: 2
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.__H0.__run()
particle-size: 2
particle-size: 2
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 2
particle-size: 2
statement: return this
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this.data = [x] ~ this.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 2
particle-size: 2
statement: return this
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this.data = [x] ~ this.data
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this.pkt_count = this.pkt_count + 1
particle-size: 2
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 2
particle-size: 2
statement: r := this.front()
particle-size: 2
particle-size: 2
statement: return this.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this.popFront()
particle-size: 2
particle-size: 2
statement: this.data = this.data[1..this.size()]
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if this.size() >= 2 {
    return ();
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.__S0.__run()
particle-size: 1
particle-size: 1
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 1
statement: this.route2 = 3
particle-size: 1
statement: this.route3 = 2 + 1
particle-size: 1
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 1
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 1
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 1
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 1
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 1
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 1
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 1
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 3
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 5
repetition: 3
statement: __d.__step()
particle-size: 5
particle-size: 5
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: (action,node) := this.scheduler()
particle-size: 5
particle-size: 5
statement: actions := ([]: (R × R)[])
particle-size: 5
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 5
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
statement: actions ~= [(0,i)]
particle-size: 5
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
statement: actions ~= [(1,i)]
particle-size: 2
loop-index: 1
particle-size: 5
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
loop-index: 2
particle-size: 5
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
statement: actions ~= [(1,i)]
particle-size: 3
loop-index: 3
particle-size: 5
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
loop-index: 4
particle-size: 5
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
loop-index: 5
particle-size: 5
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 2
particle-size: 2
statement: r := this.front()
particle-size: 2
particle-size: 2
statement: return this.data[0]
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this.popFront()
particle-size: 2
particle-size: 2
statement: this.data = this.data[1..this.size()]
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: return r
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 2
particle-size: 2
particle-size: 2
statement: if this.size() >= 2 {
    return ();
}
particle-size: 2
particle-size: 2
statement: return this.data.length
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: this.data = this.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 2
particle-size: 2
particle-size: 2
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: this.__H0.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 4 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 5
particle-size: 5
statement: return this.data.length
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 6
particle-size: 6
statement: return this.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.__H0.__run()
particle-size: 5
particle-size: 5
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 5
particle-size: 5
statement: return this
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: this.data = [x] ~ this.data
particle-size: 5
statement: return ()
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 4
particle-size: 4
statement: return this
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this.data = [x] ~ this.data
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this.pkt_count = this.pkt_count + 1
particle-size: 4
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 4
particle-size: 4
statement: r := this.front()
particle-size: 4
particle-size: 4
statement: return this.data[0]
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this.popFront()
particle-size: 4
particle-size: 4
statement: this.data = this.data[1..this.size()]
particle-size: 4
particle-size: 4
statement: return this.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: return r
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: if this.size() >= 2 {
    return ();
}
particle-size: 4
particle-size: 4
statement: return this.data.length
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this.data = this.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 4
particle-size: 4
particle-size: 4
statement: this.Q_in.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_in.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 5
particle-size: 5
particle-size: 5
particle-size: 5
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 6
particle-size: 6
statement: return this.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 6
particle-size: 6
statement: return this.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.__S0.__run()
particle-size: 1
particle-size: 1
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 1
statement: this.route2 = 3
particle-size: 1
statement: this.route3 = 2 + 1
particle-size: 1
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 1
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 1
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 1
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 1
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 1
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 1
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 1
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 3
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 8
particle-size: 8
statement: return this.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 8
particle-size: 8
statement: return this.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 8
particle-size: 8
statement: return this.data.length
particle-size: 8
particle-size: 8
particle-size: 8
particle-size: 8
statement: return ()
particle-size: 13
particle-size: 13
particle-size: 13
particle-size: 10
repetition: 4
statement: __d.__step()
particle-size: 10
particle-size: 10
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: (action,node) := this.scheduler()
particle-size: 10
particle-size: 10
statement: actions := ([]: (R × R)[])
particle-size: 10
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 10
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 10
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(1,i)]
particle-size: 6
loop-index: 1
particle-size: 10
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
loop-index: 2
particle-size: 10
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 3
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(1,i)]
particle-size: 3
loop-index: 3
particle-size: 10
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
loop-index: 4
particle-size: 10
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
loop-index: 5
particle-size: 10
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 10
particle-size: 10
statement: return this.data.length
particle-size: 10
particle-size: 10
particle-size: 10
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 6
particle-size: 6
statement: r := this.front()
particle-size: 6
particle-size: 6
statement: return this.data[0]
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.popFront()
particle-size: 6
particle-size: 6
statement: this.data = this.data[1..this.size()]
particle-size: 6
particle-size: 6
statement: return this.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: return r
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 6
particle-size: 6
particle-size: 6
statement: if this.size() >= 2 {
    return ();
}
particle-size: 6
particle-size: 6
statement: return this.data.length
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: this.data = this.data ~ [x]
particle-size: 6
statement: return ()
particle-size: 6
particle-size: 6
particle-size: 6
particle-size: 6
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: this.__H0.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 4 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 15
particle-size: 15
statement: return this.data.length
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: this.__H0.__run()
particle-size: 10
particle-size: 10
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 10
particle-size: 10
statement: return this
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: this.data = [x] ~ this.data
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 7
particle-size: 7
statement: return this
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = [x] ~ this.data
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.pkt_count = this.pkt_count + 1
particle-size: 7
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 7
particle-size: 7
statement: r := this.front()
particle-size: 7
particle-size: 7
statement: return this.data[0]
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.popFront()
particle-size: 7
particle-size: 7
statement: this.data = this.data[1..this.size()]
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return r
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.Q_in.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.Q_in.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 10
particle-size: 10
particle-size: 10
particle-size: 10
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 15
particle-size: 15
statement: return this.data.length
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 15
particle-size: 15
statement: return this.data.length
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: this.__S0.__run()
particle-size: 3
particle-size: 3
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 3
statement: this.route2 = 3
particle-size: 3
statement: this.route3 = 2 + 1
particle-size: 3
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 3
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 3
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 3
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 3
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 3
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 3
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 3
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 9
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 21
particle-size: 21
statement: return this.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: this.__S1.__run()
particle-size: 1
particle-size: 1
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 21
particle-size: 21
statement: return this.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 21
particle-size: 21
statement: return this.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: this.__S3.__run()
particle-size: 1
particle-size: 1
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 30
particle-size: 30
particle-size: 30
particle-size: 20
repetition: 5
statement: __d.__step()
particle-size: 20
particle-size: 20
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: (action,node) := this.scheduler()
particle-size: 20
particle-size: 20
statement: actions := ([]: (R × R)[])
particle-size: 20
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 20
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
statement: actions ~= [(0,i)]
particle-size: 20
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
statement: actions ~= [(1,i)]
particle-size: 14
loop-index: 1
particle-size: 20
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
loop-index: 2
particle-size: 20
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
statement: actions ~= [(0,i)]
particle-size: 7
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
statement: actions ~= [(1,i)]
particle-size: 9
loop-index: 3
particle-size: 20
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
statement: actions ~= [(1,i)]
particle-size: 1
loop-index: 4
particle-size: 20
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
loop-index: 5
particle-size: 20
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 20
particle-size: 20
statement: return this.data.length
particle-size: 20
particle-size: 20
particle-size: 20
statement: actions ~= [(1,i)]
particle-size: 1
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
particle-size: 54
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 25
particle-size: 25
statement: return this.data.length
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 14
particle-size: 14
statement: r := this.front()
particle-size: 14
particle-size: 14
statement: return this.data[0]
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: this.popFront()
particle-size: 14
particle-size: 14
statement: this.data = this.data[1..this.size()]
particle-size: 14
particle-size: 14
statement: return this.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return r
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 14
particle-size: 14
particle-size: 14
statement: if this.size() >= 2 {
    return ();
}
particle-size: 14
particle-size: 14
statement: return this.data.length
particle-size: 14
particle-size: 14
particle-size: 14
particle-size: 14
statement: return ()
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 13
statement: return ()
particle-size: 13
particle-size: 14
particle-size: 14
particle-size: 14
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 25
particle-size: 25
statement: return this.data.length
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 25
particle-size: 25
statement: return this.data.length
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 9
particle-size: 9
statement: r := this.front()
particle-size: 9
particle-size: 9
statement: return this.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.popFront()
particle-size: 9
particle-size: 9
statement: this.data = this.data[1..this.size()]
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if port == 1 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: this.__H0.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 4 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 25
particle-size: 25
statement: return this.data.length
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: this.__S2.Q_in.pushBack((pkt,2))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 25
particle-size: 25
statement: return this.data.length
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 25
particle-size: 25
statement: return this.data.length
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 29
particle-size: 29
statement: return this.data.length
particle-size: 29
particle-size: 29
particle-size: 29
particle-size: 29
statement: this.__H0.__run()
particle-size: 20
particle-size: 20
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 20
particle-size: 20
statement: return this
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: this.data = [x] ~ this.data
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 9
particle-size: 9
statement: return this
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.data = [x] ~ this.data
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.pkt_count = this.pkt_count + 1
particle-size: 9
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 9
particle-size: 9
statement: r := this.front()
particle-size: 9
particle-size: 9
statement: return this.data[0]
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.popFront()
particle-size: 9
particle-size: 9
statement: this.data = this.data[1..this.size()]
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: return r
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: if this.size() >= 2 {
    return ();
}
particle-size: 9
particle-size: 9
statement: return this.data.length
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 9
statement: return ()
particle-size: 9
particle-size: 9
particle-size: 9
particle-size: 9
statement: this.Q_in.popFront()
particle-size: 11
particle-size: 11
statement: this.data = this.data[1..this.size()]
particle-size: 11
particle-size: 11
statement: return this.data.length
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: return ()
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: this.Q_in.popFront()
particle-size: 11
particle-size: 11
statement: this.data = this.data[1..this.size()]
particle-size: 11
particle-size: 11
statement: return this.data.length
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: return ()
particle-size: 11
particle-size: 11
particle-size: 11
particle-size: 11
statement: return ()
particle-size: 20
particle-size: 20
particle-size: 20
particle-size: 20
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 29
particle-size: 29
statement: return this.data.length
particle-size: 29
particle-size: 29
particle-size: 29
particle-size: 29
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 29
particle-size: 29
statement: return this.data.length
particle-size: 29
particle-size: 29
particle-size: 29
particle-size: 29
statement: this.__S0.__run()
particle-size: 7
particle-size: 7
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 7
statement: this.route2 = 3
particle-size: 7
statement: this.route3 = 2 + 1
particle-size: 7
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 7
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 7
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 7
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 7
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 7
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 7
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 7
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 21
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 7
particle-size: 7
statement: r := this.front()
particle-size: 7
particle-size: 7
statement: return this.data[0]
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.popFront()
particle-size: 7
particle-size: 7
statement: this.data = this.data[1..this.size()]
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return r
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 7
particle-size: 7
statement: r := this.front()
particle-size: 7
particle-size: 7
statement: return this.data[0]
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.popFront()
particle-size: 7
particle-size: 7
statement: this.data = this.data[1..this.size()]
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return r
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 7
particle-size: 7
statement: r := this.front()
particle-size: 7
particle-size: 7
statement: return this.data[0]
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.popFront()
particle-size: 7
particle-size: 7
statement: this.data = this.data[1..this.size()]
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return r
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 43
particle-size: 43
statement: return this.data.length
particle-size: 43
particle-size: 43
particle-size: 43
particle-size: 43
statement: this.__S1.__run()
particle-size: 1
particle-size: 1
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 43
particle-size: 43
statement: return this.data.length
particle-size: 43
particle-size: 43
particle-size: 43
particle-size: 43
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 43
particle-size: 43
statement: return this.data.length
particle-size: 43
particle-size: 43
particle-size: 43
particle-size: 43
statement: this.__S3.__run()
particle-size: 1
particle-size: 1
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 42
repetition: 6
statement: __d.__step()
particle-size: 42
particle-size: 42
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
particle-size: 42
statement: (action,node) := this.scheduler()
particle-size: 42
particle-size: 42
statement: actions := ([]: (R × R)[])
particle-size: 42
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 42
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
statement: actions ~= [(0,i)]
particle-size: 41
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
statement: actions ~= [(1,i)]
particle-size: 22
loop-index: 1
particle-size: 42
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
loop-index: 2
particle-size: 42
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
statement: actions ~= [(0,i)]
particle-size: 15
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
statement: actions ~= [(1,i)]
particle-size: 21
loop-index: 3
particle-size: 42
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
statement: actions ~= [(0,i)]
particle-size: 3
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
statement: actions ~= [(1,i)]
particle-size: 1
loop-index: 4
particle-size: 42
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
loop-index: 5
particle-size: 42
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
statement: actions ~= [(0,i)]
particle-size: 3
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 42
particle-size: 42
statement: return this.data.length
particle-size: 42
particle-size: 42
particle-size: 42
statement: actions ~= [(1,i)]
particle-size: 1
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 109
particle-size: 109
particle-size: 109
particle-size: 109
particle-size: 109
particle-size: 109
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 45
particle-size: 45
statement: return this.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 22
particle-size: 22
statement: r := this.front()
particle-size: 22
particle-size: 22
statement: return this.data[0]
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this.popFront()
particle-size: 22
particle-size: 22
statement: this.data = this.data[1..this.size()]
particle-size: 22
particle-size: 22
statement: return this.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return r
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 22
particle-size: 22
particle-size: 22
statement: if this.size() >= 2 {
    return ();
}
particle-size: 22
particle-size: 22
statement: return this.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 21
statement: return ()
particle-size: 21
particle-size: 22
particle-size: 22
particle-size: 22
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 45
particle-size: 45
statement: return this.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 45
particle-size: 45
statement: return this.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 21
particle-size: 21
statement: r := this.front()
particle-size: 21
particle-size: 21
statement: return this.data[0]
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: this.popFront()
particle-size: 21
particle-size: 21
statement: this.data = this.data[1..this.size()]
particle-size: 21
particle-size: 21
statement: return this.data.length
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: return ()
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: return r
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
particle-size: 21
statement: if port == 1 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: this.__H0.Q_in.pushBack((pkt,1))
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if port == 4 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 45
particle-size: 45
statement: return this.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: this.__S2.Q_in.pushBack((pkt,2))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 45
particle-size: 45
statement: return this.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 45
particle-size: 45
statement: return this.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 64
particle-size: 64
statement: return this.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this.__H0.__run()
particle-size: 41
particle-size: 41
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 41
particle-size: 41
statement: return this
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: this.data = [x] ~ this.data
particle-size: 41
statement: return ()
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 17
particle-size: 17
statement: return this
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: this.data = [x] ~ this.data
particle-size: 17
statement: return ()
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: this.pkt_count = this.pkt_count + 1
particle-size: 17
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 17
particle-size: 17
statement: r := this.front()
particle-size: 17
particle-size: 17
statement: return this.data[0]
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: this.popFront()
particle-size: 17
particle-size: 17
statement: this.data = this.data[1..this.size()]
particle-size: 17
particle-size: 17
statement: return this.data.length
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: return ()
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: return r
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: if this.size() >= 2 {
    return ();
}
particle-size: 17
particle-size: 17
statement: return this.data.length
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: this.data = this.data ~ [x]
particle-size: 17
statement: return ()
particle-size: 17
particle-size: 17
particle-size: 17
particle-size: 17
statement: this.Q_in.popFront()
particle-size: 24
particle-size: 24
statement: this.data = this.data[1..this.size()]
particle-size: 24
particle-size: 24
statement: return this.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this.Q_in.popFront()
particle-size: 24
particle-size: 24
statement: this.data = this.data[1..this.size()]
particle-size: 24
particle-size: 24
statement: return this.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 41
particle-size: 41
particle-size: 41
particle-size: 41
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 64
particle-size: 64
statement: return this.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this.__H1.__run()
particle-size: 1
particle-size: 1
statement: this.pkt_count = this.pkt_count + 1
particle-size: 1
statement: this.Q_in.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 64
particle-size: 64
statement: return this.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this.__S0.__run()
particle-size: 15
particle-size: 15
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 15
statement: this.route2 = 3
particle-size: 15
statement: this.route3 = 2 + 1
particle-size: 15
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 15
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 15
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 15
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 15
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 15
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 15
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 15
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 45
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 15
particle-size: 15
statement: r := this.front()
particle-size: 15
particle-size: 15
statement: return this.data[0]
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: this.popFront()
particle-size: 15
particle-size: 15
statement: this.data = this.data[1..this.size()]
particle-size: 15
particle-size: 15
statement: return this.data.length
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: return ()
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: return r
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: if this.size() >= 2 {
    return ();
}
particle-size: 15
particle-size: 15
statement: return this.data.length
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: this.data = this.data ~ [x]
particle-size: 15
statement: return ()
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 15
particle-size: 15
statement: r := this.front()
particle-size: 15
particle-size: 15
statement: return this.data[0]
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: this.popFront()
particle-size: 15
particle-size: 15
statement: this.data = this.data[1..this.size()]
particle-size: 15
particle-size: 15
statement: return this.data.length
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: return ()
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: return r
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: if this.size() >= 2 {
    return ();
}
particle-size: 15
particle-size: 15
statement: return this.data.length
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: this.data = this.data ~ [x]
particle-size: 15
statement: return ()
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 15
particle-size: 15
statement: r := this.front()
particle-size: 15
particle-size: 15
statement: return this.data[0]
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: this.popFront()
particle-size: 15
particle-size: 15
statement: this.data = this.data[1..this.size()]
particle-size: 15
particle-size: 15
statement: return this.data.length
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: return ()
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: return r
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: if this.size() >= 2 {
    return ();
}
particle-size: 15
particle-size: 15
statement: return this.data.length
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: this.data = this.data ~ [x]
particle-size: 15
statement: return ()
particle-size: 15
particle-size: 15
particle-size: 15
particle-size: 15
statement: return ()
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 94
particle-size: 94
statement: return this.data.length
particle-size: 94
particle-size: 94
particle-size: 94
particle-size: 94
statement: this.__S1.__run()
particle-size: 3
particle-size: 3
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 94
particle-size: 94
statement: return this.data.length
particle-size: 94
particle-size: 94
particle-size: 94
particle-size: 94
statement: this.__S2.__run()
particle-size: 1
particle-size: 1
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 94
particle-size: 94
statement: return this.data.length
particle-size: 94
particle-size: 94
particle-size: 94
particle-size: 94
statement: this.__S3.__run()
particle-size: 3
particle-size: 3
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 139
particle-size: 139
particle-size: 139
particle-size: 77
repetition: 7
statement: __d.__step()
particle-size: 77
particle-size: 77
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
particle-size: 77
statement: (action,node) := this.scheduler()
particle-size: 77
particle-size: 77
statement: actions := ([]: (R × R)[])
particle-size: 77
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 77
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
statement: actions ~= [(0,i)]
particle-size: 75
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
statement: actions ~= [(1,i)]
particle-size: 38
loop-index: 1
particle-size: 77
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
loop-index: 2
particle-size: 77
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
statement: actions ~= [(0,i)]
particle-size: 26
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
statement: actions ~= [(1,i)]
particle-size: 48
loop-index: 3
particle-size: 77
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
statement: actions ~= [(0,i)]
particle-size: 7
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
statement: actions ~= [(1,i)]
particle-size: 3
loop-index: 4
particle-size: 77
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
statement: actions ~= [(0,i)]
particle-size: 1
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
statement: actions ~= [(1,i)]
particle-size: 1
loop-index: 5
particle-size: 77
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
statement: actions ~= [(0,i)]
particle-size: 7
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 77
particle-size: 77
statement: return this.data.length
particle-size: 77
particle-size: 77
particle-size: 77
statement: actions ~= [(1,i)]
particle-size: 3
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 210
particle-size: 210
particle-size: 210
particle-size: 210
particle-size: 210
particle-size: 210
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 93
particle-size: 93
statement: return this.data.length
particle-size: 93
particle-size: 93
particle-size: 93
particle-size: 93
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 38
particle-size: 38
statement: r := this.front()
particle-size: 38
particle-size: 38
statement: return this.data[0]
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: this.popFront()
particle-size: 38
particle-size: 38
statement: this.data = this.data[1..this.size()]
particle-size: 38
particle-size: 38
statement: return this.data.length
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return r
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 38
particle-size: 38
particle-size: 38
statement: if this.size() >= 2 {
    return ();
}
particle-size: 38
particle-size: 38
statement: return this.data.length
particle-size: 38
particle-size: 38
particle-size: 38
particle-size: 38
statement: return ()
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 37
statement: return ()
particle-size: 37
particle-size: 38
particle-size: 38
particle-size: 38
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 93
particle-size: 93
statement: return this.data.length
particle-size: 93
particle-size: 93
particle-size: 93
particle-size: 93
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 93
particle-size: 93
statement: return this.data.length
particle-size: 93
particle-size: 93
particle-size: 93
particle-size: 93
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 48
particle-size: 48
statement: r := this.front()
particle-size: 48
particle-size: 48
statement: return this.data[0]
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: this.popFront()
particle-size: 48
particle-size: 48
statement: this.data = this.data[1..this.size()]
particle-size: 48
particle-size: 48
statement: return this.data.length
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: return r
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
particle-size: 48
statement: if port == 1 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: this.__H0.Q_in.pushBack((pkt,1))
particle-size: 16
particle-size: 16
particle-size: 16
statement: if this.size() >= 2 {
    return ();
}
particle-size: 16
particle-size: 16
statement: return this.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: return ()
particle-size: 14
statement: this.data = this.data ~ [x]
particle-size: 2
statement: return ()
particle-size: 2
particle-size: 16
particle-size: 16
particle-size: 16
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 16
particle-size: 16
particle-size: 16
statement: if this.size() >= 2 {
    return ();
}
particle-size: 16
particle-size: 16
statement: return this.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this.data = this.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 16
particle-size: 16
particle-size: 16
statement: if this.size() >= 2 {
    return ();
}
particle-size: 16
particle-size: 16
statement: return this.data.length
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: this.data = this.data ~ [x]
particle-size: 16
statement: return ()
particle-size: 16
particle-size: 16
particle-size: 16
particle-size: 16
statement: if port == 4 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 93
particle-size: 93
statement: return this.data.length
particle-size: 93
particle-size: 93
particle-size: 93
particle-size: 93
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: this.__S2.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 93
particle-size: 93
statement: return this.data.length
particle-size: 93
particle-size: 93
particle-size: 93
particle-size: 93
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,4));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 93
particle-size: 93
statement: return this.data.length
particle-size: 93
particle-size: 93
particle-size: 93
particle-size: 93
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 117
particle-size: 117
statement: return this.data.length
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: this.__H0.__run()
particle-size: 75
particle-size: 75
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 75
particle-size: 75
statement: return this
particle-size: 75
particle-size: 75
particle-size: 75
particle-size: 75
particle-size: 75
statement: this.data = [x] ~ this.data
particle-size: 75
statement: return ()
particle-size: 75
particle-size: 75
particle-size: 75
particle-size: 75
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 18
particle-size: 18
statement: return this
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = [x] ~ this.data
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.pkt_count = this.pkt_count + 1
particle-size: 18
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if this.size() >= 2 {
    return ();
}
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.Q_in.popFront()
particle-size: 57
particle-size: 57
statement: this.data = this.data[1..this.size()]
particle-size: 57
particle-size: 57
statement: return this.data.length
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
statement: return ()
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
statement: this.Q_in.popFront()
particle-size: 57
particle-size: 57
statement: this.data = this.data[1..this.size()]
particle-size: 57
particle-size: 57
statement: return this.data.length
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
statement: return ()
particle-size: 57
particle-size: 57
particle-size: 57
particle-size: 57
statement: return ()
particle-size: 75
particle-size: 75
particle-size: 75
particle-size: 75
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 117
particle-size: 117
statement: return this.data.length
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: this.__H1.__run()
particle-size: 1
particle-size: 1
statement: this.pkt_count = this.pkt_count + 1
particle-size: 1
statement: this.Q_in.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 117
particle-size: 117
statement: return this.data.length
particle-size: 117
particle-size: 117
particle-size: 117
particle-size: 117
statement: this.__S0.__run()
particle-size: 26
particle-size: 26
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 26
statement: this.route2 = 3
particle-size: 26
statement: this.route3 = 2 + 1
particle-size: 26
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 26
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 26
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 26
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 26
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 26
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 26
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 26
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 78
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 26
particle-size: 26
statement: r := this.front()
particle-size: 26
particle-size: 26
statement: return this.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this.popFront()
particle-size: 26
particle-size: 26
statement: this.data = this.data[1..this.size()]
particle-size: 26
particle-size: 26
statement: return this.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if this.size() >= 2 {
    return ();
}
particle-size: 26
particle-size: 26
statement: return this.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this.data = this.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 26
particle-size: 26
statement: r := this.front()
particle-size: 26
particle-size: 26
statement: return this.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this.popFront()
particle-size: 26
particle-size: 26
statement: this.data = this.data[1..this.size()]
particle-size: 26
particle-size: 26
statement: return this.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if this.size() >= 2 {
    return ();
}
particle-size: 26
particle-size: 26
statement: return this.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this.data = this.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 26
particle-size: 26
statement: r := this.front()
particle-size: 26
particle-size: 26
statement: return this.data[0]
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this.popFront()
particle-size: 26
particle-size: 26
statement: this.data = this.data[1..this.size()]
particle-size: 26
particle-size: 26
statement: return this.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return r
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: if this.size() >= 2 {
    return ();
}
particle-size: 26
particle-size: 26
statement: return this.data.length
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: this.data = this.data ~ [x]
particle-size: 26
statement: return ()
particle-size: 26
particle-size: 26
particle-size: 26
particle-size: 26
statement: return ()
particle-size: 78
particle-size: 78
particle-size: 78
particle-size: 78
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 169
particle-size: 169
statement: return this.data.length
particle-size: 169
particle-size: 169
particle-size: 169
particle-size: 169
statement: this.__S1.__run()
particle-size: 7
particle-size: 7
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 7
particle-size: 7
statement: r := this.front()
particle-size: 7
particle-size: 7
statement: return this.data[0]
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.popFront()
particle-size: 7
particle-size: 7
statement: this.data = this.data[1..this.size()]
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return r
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 169
particle-size: 169
statement: return this.data.length
particle-size: 169
particle-size: 169
particle-size: 169
particle-size: 169
statement: this.__S2.__run()
particle-size: 1
particle-size: 1
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 169
particle-size: 169
statement: return this.data.length
particle-size: 169
particle-size: 169
particle-size: 169
particle-size: 169
statement: this.__S3.__run()
particle-size: 7
particle-size: 7
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 7
particle-size: 7
statement: r := this.front()
particle-size: 7
particle-size: 7
statement: return this.data[0]
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.popFront()
particle-size: 7
particle-size: 7
statement: this.data = this.data[1..this.size()]
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return r
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 262
particle-size: 262
particle-size: 262
particle-size: 136
repetition: 8
statement: __d.__step()
particle-size: 136
particle-size: 136
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
particle-size: 136
statement: (action,node) := this.scheduler()
particle-size: 136
particle-size: 136
statement: actions := ([]: (R × R)[])
particle-size: 136
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 136
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
statement: actions ~= [(0,i)]
particle-size: 128
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
statement: actions ~= [(1,i)]
particle-size: 56
loop-index: 1
particle-size: 136
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
statement: actions ~= [(0,i)]
particle-size: 3
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
loop-index: 2
particle-size: 136
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
statement: actions ~= [(0,i)]
particle-size: 44
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
statement: actions ~= [(1,i)]
particle-size: 81
loop-index: 3
particle-size: 136
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
statement: actions ~= [(0,i)]
particle-size: 18
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
statement: actions ~= [(1,i)]
particle-size: 7
loop-index: 4
particle-size: 136
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
statement: actions ~= [(0,i)]
particle-size: 3
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
statement: actions ~= [(1,i)]
particle-size: 1
loop-index: 5
particle-size: 136
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
statement: actions ~= [(0,i)]
particle-size: 19
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 136
particle-size: 136
statement: return this.data.length
particle-size: 136
particle-size: 136
particle-size: 136
statement: actions ~= [(1,i)]
particle-size: 7
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 367
particle-size: 367
particle-size: 367
particle-size: 367
particle-size: 367
particle-size: 367
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 152
particle-size: 152
statement: return this.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 56
particle-size: 56
statement: r := this.front()
particle-size: 56
particle-size: 56
statement: return this.data[0]
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: this.popFront()
particle-size: 56
particle-size: 56
statement: this.data = this.data[1..this.size()]
particle-size: 56
particle-size: 56
statement: return this.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return r
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 56
particle-size: 56
particle-size: 56
statement: if this.size() >= 2 {
    return ();
}
particle-size: 56
particle-size: 56
statement: return this.data.length
particle-size: 56
particle-size: 56
particle-size: 56
particle-size: 56
statement: return ()
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 56
particle-size: 56
particle-size: 56
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 152
particle-size: 152
statement: return this.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 152
particle-size: 152
statement: return this.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 81
particle-size: 81
statement: r := this.front()
particle-size: 81
particle-size: 81
statement: return this.data[0]
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: this.popFront()
particle-size: 81
particle-size: 81
statement: this.data = this.data[1..this.size()]
particle-size: 81
particle-size: 81
statement: return this.data.length
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: return ()
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: return r
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
particle-size: 81
statement: if port == 1 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: this.__H0.Q_in.pushBack((pkt,1))
particle-size: 27
particle-size: 27
particle-size: 27
statement: if this.size() >= 2 {
    return ();
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: return ()
particle-size: 23
statement: this.data = this.data ~ [x]
particle-size: 4
statement: return ()
particle-size: 4
particle-size: 27
particle-size: 27
particle-size: 27
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 27
particle-size: 27
particle-size: 27
statement: if this.size() >= 2 {
    return ();
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this.data = this.data ~ [x]
particle-size: 27
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 27
particle-size: 27
particle-size: 27
statement: if this.size() >= 2 {
    return ();
}
particle-size: 27
particle-size: 27
statement: return this.data.length
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: this.data = this.data ~ [x]
particle-size: 27
statement: return ()
particle-size: 27
particle-size: 27
particle-size: 27
particle-size: 27
statement: if port == 4 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 152
particle-size: 152
statement: return this.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 7
particle-size: 7
statement: r := this.front()
particle-size: 7
particle-size: 7
statement: return this.data[0]
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.popFront()
particle-size: 7
particle-size: 7
statement: this.data = this.data[1..this.size()]
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return r
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: this.__S2.Q_in.pushBack((pkt,2))
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 152
particle-size: 152
statement: return this.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 1
particle-size: 1
statement: r := this.front()
particle-size: 1
particle-size: 1
statement: return this.data[0]
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.popFront()
particle-size: 1
particle-size: 1
statement: this.data = this.data[1..this.size()]
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: return r
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,4));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 1
particle-size: 1
particle-size: 1
statement: if this.size() >= 2 {
    return ();
}
particle-size: 1
particle-size: 1
statement: return this.data.length
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 1
statement: return ()
particle-size: 1
particle-size: 1
particle-size: 1
particle-size: 1
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 152
particle-size: 152
statement: return this.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 7
particle-size: 7
statement: r := this.front()
particle-size: 7
particle-size: 7
statement: return this.data[0]
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.popFront()
particle-size: 7
particle-size: 7
statement: this.data = this.data[1..this.size()]
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return r
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 215
particle-size: 215
statement: return this.data.length
particle-size: 215
particle-size: 215
particle-size: 215
particle-size: 215
statement: this.__H0.__run()
particle-size: 128
particle-size: 128
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 128
particle-size: 128
statement: return this
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: this.data = [x] ~ this.data
particle-size: 128
statement: return ()
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 23
particle-size: 23
statement: return this
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
statement: this.data = [x] ~ this.data
particle-size: 23
statement: return ()
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
statement: this.pkt_count = this.pkt_count + 1
particle-size: 23
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 23
particle-size: 23
statement: r := this.front()
particle-size: 23
particle-size: 23
statement: return this.data[0]
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
statement: this.popFront()
particle-size: 23
particle-size: 23
statement: this.data = this.data[1..this.size()]
particle-size: 23
particle-size: 23
statement: return this.data.length
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
statement: return ()
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
statement: return r
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
statement: if this.size() >= 2 {
    return ();
}
particle-size: 23
particle-size: 23
statement: return this.data.length
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
statement: this.data = this.data ~ [x]
particle-size: 23
statement: return ()
particle-size: 23
particle-size: 23
particle-size: 23
particle-size: 23
statement: this.Q_in.popFront()
particle-size: 105
particle-size: 105
statement: this.data = this.data[1..this.size()]
particle-size: 105
particle-size: 105
statement: return this.data.length
particle-size: 105
particle-size: 105
particle-size: 105
particle-size: 105
particle-size: 105
statement: return ()
particle-size: 105
particle-size: 105
particle-size: 105
particle-size: 105
statement: this.Q_in.popFront()
particle-size: 105
particle-size: 105
statement: this.data = this.data[1..this.size()]
particle-size: 105
particle-size: 105
statement: return this.data.length
particle-size: 105
particle-size: 105
particle-size: 105
particle-size: 105
particle-size: 105
statement: return ()
particle-size: 105
particle-size: 105
particle-size: 105
particle-size: 105
statement: return ()
particle-size: 128
particle-size: 128
particle-size: 128
particle-size: 128
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 215
particle-size: 215
statement: return this.data.length
particle-size: 215
particle-size: 215
particle-size: 215
particle-size: 215
statement: this.__H1.__run()
particle-size: 3
particle-size: 3
statement: this.pkt_count = this.pkt_count + 1
particle-size: 3
statement: this.Q_in.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 215
particle-size: 215
statement: return this.data.length
particle-size: 215
particle-size: 215
particle-size: 215
particle-size: 215
statement: this.__S0.__run()
particle-size: 44
particle-size: 44
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 44
statement: this.route2 = 3
particle-size: 44
statement: this.route3 = 2 + 1
particle-size: 44
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 44
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 44
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 44
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 44
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 44
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 44
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 44
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 132
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 44
particle-size: 44
statement: r := this.front()
particle-size: 44
particle-size: 44
statement: return this.data[0]
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: this.popFront()
particle-size: 44
particle-size: 44
statement: this.data = this.data[1..this.size()]
particle-size: 44
particle-size: 44
statement: return this.data.length
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return ()
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return r
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: if this.size() >= 2 {
    return ();
}
particle-size: 44
particle-size: 44
statement: return this.data.length
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 35
statement: return ()
particle-size: 35
particle-size: 44
particle-size: 44
particle-size: 44
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 44
particle-size: 44
statement: r := this.front()
particle-size: 44
particle-size: 44
statement: return this.data[0]
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: this.popFront()
particle-size: 44
particle-size: 44
statement: this.data = this.data[1..this.size()]
particle-size: 44
particle-size: 44
statement: return this.data.length
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return ()
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return r
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: if this.size() >= 2 {
    return ();
}
particle-size: 44
particle-size: 44
statement: return this.data.length
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 35
statement: return ()
particle-size: 35
particle-size: 44
particle-size: 44
particle-size: 44
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 44
particle-size: 44
statement: r := this.front()
particle-size: 44
particle-size: 44
statement: return this.data[0]
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: this.popFront()
particle-size: 44
particle-size: 44
statement: this.data = this.data[1..this.size()]
particle-size: 44
particle-size: 44
statement: return this.data.length
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return ()
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return r
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: if this.size() >= 2 {
    return ();
}
particle-size: 44
particle-size: 44
statement: return this.data.length
particle-size: 44
particle-size: 44
particle-size: 44
particle-size: 44
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 35
statement: return ()
particle-size: 35
particle-size: 44
particle-size: 44
particle-size: 44
statement: return ()
particle-size: 132
particle-size: 132
particle-size: 132
particle-size: 132
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 303
particle-size: 303
statement: return this.data.length
particle-size: 303
particle-size: 303
particle-size: 303
particle-size: 303
statement: this.__S1.__run()
particle-size: 18
particle-size: 18
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if this.size() >= 2 {
    return ();
}
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 303
particle-size: 303
statement: return this.data.length
particle-size: 303
particle-size: 303
particle-size: 303
particle-size: 303
statement: this.__S2.__run()
particle-size: 3
particle-size: 3
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 303
particle-size: 303
statement: return this.data.length
particle-size: 303
particle-size: 303
particle-size: 303
particle-size: 303
statement: this.__S3.__run()
particle-size: 19
particle-size: 19
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 19
particle-size: 19
statement: r := this.front()
particle-size: 19
particle-size: 19
statement: return this.data[0]
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: this.popFront()
particle-size: 19
particle-size: 19
statement: this.data = this.data[1..this.size()]
particle-size: 19
particle-size: 19
statement: return this.data.length
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: return ()
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: return r
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: if this.size() >= 2 {
    return ();
}
particle-size: 19
particle-size: 19
statement: return this.data.length
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: this.data = this.data ~ [x]
particle-size: 19
statement: return ()
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: return ()
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: return ()
particle-size: 455
particle-size: 455
particle-size: 455
particle-size: 221
repetition: 9
statement: __d.__step()
particle-size: 221
particle-size: 221
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
particle-size: 221
statement: (action,node) := this.scheduler()
particle-size: 221
particle-size: 221
statement: actions := ([]: (R × R)[])
particle-size: 221
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 221
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
statement: actions ~= [(0,i)]
particle-size: 208
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
statement: actions ~= [(1,i)]
particle-size: 72
loop-index: 1
particle-size: 221
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
statement: actions ~= [(0,i)]
particle-size: 7
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
loop-index: 2
particle-size: 221
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
statement: actions ~= [(0,i)]
particle-size: 64
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
statement: actions ~= [(1,i)]
particle-size: 135
loop-index: 3
particle-size: 221
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
statement: actions ~= [(0,i)]
particle-size: 32
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
statement: actions ~= [(1,i)]
particle-size: 18
loop-index: 4
particle-size: 221
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
statement: actions ~= [(0,i)]
particle-size: 7
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
statement: actions ~= [(1,i)]
particle-size: 3
loop-index: 5
particle-size: 221
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
statement: actions ~= [(0,i)]
particle-size: 33
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 221
particle-size: 221
statement: return this.data.length
particle-size: 221
particle-size: 221
particle-size: 221
statement: actions ~= [(1,i)]
particle-size: 19
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 598
particle-size: 598
particle-size: 598
particle-size: 598
particle-size: 598
particle-size: 598
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 247
particle-size: 247
statement: return this.data.length
particle-size: 247
particle-size: 247
particle-size: 247
particle-size: 247
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 72
particle-size: 72
statement: r := this.front()
particle-size: 72
particle-size: 72
statement: return this.data[0]
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this.popFront()
particle-size: 72
particle-size: 72
statement: this.data = this.data[1..this.size()]
particle-size: 72
particle-size: 72
statement: return this.data.length
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: return r
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 72
particle-size: 72
particle-size: 72
statement: if this.size() >= 2 {
    return ();
}
particle-size: 72
particle-size: 72
statement: return this.data.length
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: this.data = this.data ~ [x]
particle-size: 72
statement: return ()
particle-size: 72
particle-size: 72
particle-size: 72
particle-size: 72
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 247
particle-size: 247
statement: return this.data.length
particle-size: 247
particle-size: 247
particle-size: 247
particle-size: 247
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 247
particle-size: 247
statement: return this.data.length
particle-size: 247
particle-size: 247
particle-size: 247
particle-size: 247
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 135
particle-size: 135
statement: r := this.front()
particle-size: 135
particle-size: 135
statement: return this.data[0]
particle-size: 135
particle-size: 135
particle-size: 135
particle-size: 135
particle-size: 135
statement: this.popFront()
particle-size: 135
particle-size: 135
statement: this.data = this.data[1..this.size()]
particle-size: 135
particle-size: 135
statement: return this.data.length
particle-size: 135
particle-size: 135
particle-size: 135
particle-size: 135
particle-size: 135
statement: return ()
particle-size: 135
particle-size: 135
particle-size: 135
particle-size: 135
statement: return r
particle-size: 135
particle-size: 135
particle-size: 135
particle-size: 135
particle-size: 135
particle-size: 135
statement: if port == 1 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: this.__H0.Q_in.pushBack((pkt,1))
particle-size: 45
particle-size: 45
particle-size: 45
statement: if this.size() >= 2 {
    return ();
}
particle-size: 45
particle-size: 45
statement: return this.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: return ()
particle-size: 35
statement: this.data = this.data ~ [x]
particle-size: 10
statement: return ()
particle-size: 10
particle-size: 45
particle-size: 45
particle-size: 45
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 45
particle-size: 45
particle-size: 45
statement: if this.size() >= 2 {
    return ();
}
particle-size: 45
particle-size: 45
statement: return this.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: this.data = this.data ~ [x]
particle-size: 45
statement: return ()
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 45
particle-size: 45
particle-size: 45
statement: if this.size() >= 2 {
    return ();
}
particle-size: 45
particle-size: 45
statement: return this.data.length
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: this.data = this.data ~ [x]
particle-size: 45
statement: return ()
particle-size: 45
particle-size: 45
particle-size: 45
particle-size: 45
statement: if port == 4 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 247
particle-size: 247
statement: return this.data.length
particle-size: 247
particle-size: 247
particle-size: 247
particle-size: 247
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: this.__S2.Q_in.pushBack((pkt,2))
particle-size: 18
particle-size: 18
particle-size: 18
statement: if this.size() >= 2 {
    return ();
}
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 247
particle-size: 247
statement: return this.data.length
particle-size: 247
particle-size: 247
particle-size: 247
particle-size: 247
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 3
particle-size: 3
statement: r := this.front()
particle-size: 3
particle-size: 3
statement: return this.data[0]
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.popFront()
particle-size: 3
particle-size: 3
statement: this.data = this.data[1..this.size()]
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: return r
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,4));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 3
particle-size: 3
particle-size: 3
statement: if this.size() >= 2 {
    return ();
}
particle-size: 3
particle-size: 3
statement: return this.data.length
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: this.data = this.data ~ [x]
particle-size: 3
statement: return ()
particle-size: 3
particle-size: 3
particle-size: 3
particle-size: 3
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 247
particle-size: 247
statement: return this.data.length
particle-size: 247
particle-size: 247
particle-size: 247
particle-size: 247
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 19
particle-size: 19
statement: r := this.front()
particle-size: 19
particle-size: 19
statement: return this.data[0]
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: this.popFront()
particle-size: 19
particle-size: 19
statement: this.data = this.data[1..this.size()]
particle-size: 19
particle-size: 19
statement: return this.data.length
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: return ()
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: return r
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
particle-size: 19
particle-size: 19
particle-size: 19
statement: if this.size() >= 2 {
    return ();
}
particle-size: 19
particle-size: 19
statement: return this.data.length
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: this.data = this.data ~ [x]
particle-size: 19
statement: return ()
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 351
particle-size: 351
statement: return this.data.length
particle-size: 351
particle-size: 351
particle-size: 351
particle-size: 351
statement: this.__H0.__run()
particle-size: 208
particle-size: 208
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 208
particle-size: 208
statement: return this
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: this.data = [x] ~ this.data
particle-size: 208
statement: return ()
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 22
particle-size: 22
statement: return this
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this.data = [x] ~ this.data
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this.pkt_count = this.pkt_count + 1
particle-size: 22
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 22
particle-size: 22
statement: r := this.front()
particle-size: 22
particle-size: 22
statement: return this.data[0]
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this.popFront()
particle-size: 22
particle-size: 22
statement: this.data = this.data[1..this.size()]
particle-size: 22
particle-size: 22
statement: return this.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return r
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: if this.size() >= 2 {
    return ();
}
particle-size: 22
particle-size: 22
statement: return this.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this.data = this.data ~ [x]
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this.Q_in.popFront()
particle-size: 186
particle-size: 186
statement: this.data = this.data[1..this.size()]
particle-size: 186
particle-size: 186
statement: return this.data.length
particle-size: 186
particle-size: 186
particle-size: 186
particle-size: 186
particle-size: 186
statement: return ()
particle-size: 186
particle-size: 186
particle-size: 186
particle-size: 186
statement: this.Q_in.popFront()
particle-size: 186
particle-size: 186
statement: this.data = this.data[1..this.size()]
particle-size: 186
particle-size: 186
statement: return this.data.length
particle-size: 186
particle-size: 186
particle-size: 186
particle-size: 186
particle-size: 186
statement: return ()
particle-size: 186
particle-size: 186
particle-size: 186
particle-size: 186
statement: return ()
particle-size: 208
particle-size: 208
particle-size: 208
particle-size: 208
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 351
particle-size: 351
statement: return this.data.length
particle-size: 351
particle-size: 351
particle-size: 351
particle-size: 351
statement: this.__H1.__run()
particle-size: 7
particle-size: 7
statement: this.pkt_count = this.pkt_count + 1
particle-size: 7
statement: this.Q_in.popFront()
particle-size: 7
particle-size: 7
statement: this.data = this.data[1..this.size()]
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 351
particle-size: 351
statement: return this.data.length
particle-size: 351
particle-size: 351
particle-size: 351
particle-size: 351
statement: this.__S0.__run()
particle-size: 64
particle-size: 64
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 64
statement: this.route2 = 3
particle-size: 64
statement: this.route3 = 2 + 1
particle-size: 64
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 64
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 64
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 64
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 64
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 64
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 64
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 64
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 192
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 64
particle-size: 64
statement: r := this.front()
particle-size: 64
particle-size: 64
statement: return this.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this.popFront()
particle-size: 64
particle-size: 64
statement: this.data = this.data[1..this.size()]
particle-size: 64
particle-size: 64
statement: return this.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: if this.size() >= 2 {
    return ();
}
particle-size: 64
particle-size: 64
statement: return this.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 64
particle-size: 64
particle-size: 64
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 64
particle-size: 64
statement: r := this.front()
particle-size: 64
particle-size: 64
statement: return this.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this.popFront()
particle-size: 64
particle-size: 64
statement: this.data = this.data[1..this.size()]
particle-size: 64
particle-size: 64
statement: return this.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: if this.size() >= 2 {
    return ();
}
particle-size: 64
particle-size: 64
statement: return this.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 64
particle-size: 64
particle-size: 64
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 64
particle-size: 64
statement: r := this.front()
particle-size: 64
particle-size: 64
statement: return this.data[0]
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: this.popFront()
particle-size: 64
particle-size: 64
statement: this.data = this.data[1..this.size()]
particle-size: 64
particle-size: 64
statement: return this.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return r
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: if this.size() >= 2 {
    return ();
}
particle-size: 64
particle-size: 64
statement: return this.data.length
particle-size: 64
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 55
statement: return ()
particle-size: 55
particle-size: 64
particle-size: 64
particle-size: 64
statement: return ()
particle-size: 192
particle-size: 192
particle-size: 192
particle-size: 192
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 479
particle-size: 479
statement: return this.data.length
particle-size: 479
particle-size: 479
particle-size: 479
particle-size: 479
statement: this.__S1.__run()
particle-size: 32
particle-size: 32
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 32
particle-size: 32
statement: r := this.front()
particle-size: 32
particle-size: 32
statement: return this.data[0]
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this.popFront()
particle-size: 32
particle-size: 32
statement: this.data = this.data[1..this.size()]
particle-size: 32
particle-size: 32
statement: return this.data.length
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return r
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if this.size() >= 2 {
    return ();
}
particle-size: 32
particle-size: 32
statement: return this.data.length
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this.data = this.data ~ [x]
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 479
particle-size: 479
statement: return this.data.length
particle-size: 479
particle-size: 479
particle-size: 479
particle-size: 479
statement: this.__S2.__run()
particle-size: 7
particle-size: 7
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 7
particle-size: 7
statement: r := this.front()
particle-size: 7
particle-size: 7
statement: return this.data[0]
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.popFront()
particle-size: 7
particle-size: 7
statement: this.data = this.data[1..this.size()]
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return r
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 479
particle-size: 479
statement: return this.data.length
particle-size: 479
particle-size: 479
particle-size: 479
particle-size: 479
statement: this.__S3.__run()
particle-size: 33
particle-size: 33
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 33
particle-size: 33
statement: r := this.front()
particle-size: 33
particle-size: 33
statement: return this.data[0]
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: this.popFront()
particle-size: 33
particle-size: 33
statement: this.data = this.data[1..this.size()]
particle-size: 33
particle-size: 33
statement: return this.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return r
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: if this.size() >= 2 {
    return ();
}
particle-size: 33
particle-size: 33
statement: return this.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: this.data = this.data ~ [x]
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return ()
particle-size: 726
particle-size: 726
particle-size: 726
particle-size: 358
repetition: 10
statement: __d.__step()
particle-size: 358
particle-size: 358
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
particle-size: 358
statement: (action,node) := this.scheduler()
particle-size: 358
particle-size: 358
statement: actions := ([]: (R × R)[])
particle-size: 358
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 358
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
statement: actions ~= [(0,i)]
particle-size: 322
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
statement: actions ~= [(1,i)]
particle-size: 87
loop-index: 1
particle-size: 358
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
statement: actions ~= [(0,i)]
particle-size: 19
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
loop-index: 2
particle-size: 358
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
statement: actions ~= [(0,i)]
particle-size: 83
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
statement: actions ~= [(1,i)]
particle-size: 222
loop-index: 3
particle-size: 358
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
statement: actions ~= [(0,i)]
particle-size: 65
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
statement: actions ~= [(1,i)]
particle-size: 32
loop-index: 4
particle-size: 358
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
statement: actions ~= [(0,i)]
particle-size: 18
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
statement: actions ~= [(1,i)]
particle-size: 7
loop-index: 5
particle-size: 358
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
statement: actions ~= [(0,i)]
particle-size: 68
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 358
particle-size: 358
statement: return this.data.length
particle-size: 358
particle-size: 358
particle-size: 358
statement: actions ~= [(1,i)]
particle-size: 33
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 956
particle-size: 956
particle-size: 956
particle-size: 956
particle-size: 956
particle-size: 956
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 381
particle-size: 381
statement: return this.data.length
particle-size: 381
particle-size: 381
particle-size: 381
particle-size: 381
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 87
particle-size: 87
statement: r := this.front()
particle-size: 87
particle-size: 87
statement: return this.data[0]
particle-size: 87
particle-size: 87
particle-size: 87
particle-size: 87
particle-size: 87
statement: this.popFront()
particle-size: 87
particle-size: 87
statement: this.data = this.data[1..this.size()]
particle-size: 87
particle-size: 87
statement: return this.data.length
particle-size: 87
particle-size: 87
particle-size: 87
particle-size: 87
particle-size: 87
statement: return ()
particle-size: 87
particle-size: 87
particle-size: 87
particle-size: 87
statement: return r
particle-size: 87
particle-size: 87
particle-size: 87
particle-size: 87
particle-size: 87
particle-size: 87
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 87
particle-size: 87
particle-size: 87
statement: if this.size() >= 2 {
    return ();
}
particle-size: 87
particle-size: 87
statement: return this.data.length
particle-size: 87
particle-size: 87
particle-size: 87
particle-size: 87
statement: this.data = this.data ~ [x]
particle-size: 87
statement: return ()
particle-size: 87
particle-size: 87
particle-size: 87
particle-size: 87
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 381
particle-size: 381
statement: return this.data.length
particle-size: 381
particle-size: 381
particle-size: 381
particle-size: 381
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 381
particle-size: 381
statement: return this.data.length
particle-size: 381
particle-size: 381
particle-size: 381
particle-size: 381
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 222
particle-size: 222
statement: r := this.front()
particle-size: 222
particle-size: 222
statement: return this.data[0]
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: this.popFront()
particle-size: 222
particle-size: 222
statement: this.data = this.data[1..this.size()]
particle-size: 222
particle-size: 222
statement: return this.data.length
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: return ()
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: return r
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
particle-size: 222
statement: if port == 1 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: this.__H0.Q_in.pushBack((pkt,1))
particle-size: 74
particle-size: 74
particle-size: 74
statement: if this.size() >= 2 {
    return ();
}
particle-size: 74
particle-size: 74
statement: return this.data.length
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: return ()
particle-size: 54
statement: this.data = this.data ~ [x]
particle-size: 20
statement: return ()
particle-size: 20
particle-size: 74
particle-size: 74
particle-size: 74
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 74
particle-size: 74
particle-size: 74
statement: if this.size() >= 2 {
    return ();
}
particle-size: 74
particle-size: 74
statement: return this.data.length
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this.data = this.data ~ [x]
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 74
particle-size: 74
particle-size: 74
statement: if this.size() >= 2 {
    return ();
}
particle-size: 74
particle-size: 74
statement: return this.data.length
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: this.data = this.data ~ [x]
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 74
particle-size: 74
particle-size: 74
statement: if port == 4 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 381
particle-size: 381
statement: return this.data.length
particle-size: 381
particle-size: 381
particle-size: 381
particle-size: 381
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 32
particle-size: 32
statement: r := this.front()
particle-size: 32
particle-size: 32
statement: return this.data[0]
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this.popFront()
particle-size: 32
particle-size: 32
statement: this.data = this.data[1..this.size()]
particle-size: 32
particle-size: 32
statement: return this.data.length
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return r
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: this.__S2.Q_in.pushBack((pkt,2))
particle-size: 32
particle-size: 32
particle-size: 32
statement: if this.size() >= 2 {
    return ();
}
particle-size: 32
particle-size: 32
statement: return this.data.length
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this.data = this.data ~ [x]
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 381
particle-size: 381
statement: return this.data.length
particle-size: 381
particle-size: 381
particle-size: 381
particle-size: 381
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 7
particle-size: 7
statement: r := this.front()
particle-size: 7
particle-size: 7
statement: return this.data[0]
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.popFront()
particle-size: 7
particle-size: 7
statement: this.data = this.data[1..this.size()]
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: return r
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,4));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 7
particle-size: 7
particle-size: 7
statement: if this.size() >= 2 {
    return ();
}
particle-size: 7
particle-size: 7
statement: return this.data.length
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: this.data = this.data ~ [x]
particle-size: 7
statement: return ()
particle-size: 7
particle-size: 7
particle-size: 7
particle-size: 7
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 381
particle-size: 381
statement: return this.data.length
particle-size: 381
particle-size: 381
particle-size: 381
particle-size: 381
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 33
particle-size: 33
statement: r := this.front()
particle-size: 33
particle-size: 33
statement: return this.data[0]
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: this.popFront()
particle-size: 33
particle-size: 33
statement: this.data = this.data[1..this.size()]
particle-size: 33
particle-size: 33
statement: return this.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return r
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
particle-size: 33
particle-size: 33
particle-size: 33
statement: if this.size() >= 2 {
    return ();
}
particle-size: 33
particle-size: 33
statement: return this.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: this.data = this.data ~ [x]
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 575
particle-size: 575
statement: return this.data.length
particle-size: 575
particle-size: 575
particle-size: 575
particle-size: 575
statement: this.__H0.__run()
particle-size: 322
particle-size: 322
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 322
particle-size: 322
statement: return this
particle-size: 322
particle-size: 322
particle-size: 322
particle-size: 322
particle-size: 322
statement: this.data = [x] ~ this.data
particle-size: 322
statement: return ()
particle-size: 322
particle-size: 322
particle-size: 322
particle-size: 322
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 25
particle-size: 25
statement: return this
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: this.data = [x] ~ this.data
particle-size: 25
statement: return ()
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: this.pkt_count = this.pkt_count + 1
particle-size: 25
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 25
particle-size: 25
statement: r := this.front()
particle-size: 25
particle-size: 25
statement: return this.data[0]
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: this.popFront()
particle-size: 25
particle-size: 25
statement: this.data = this.data[1..this.size()]
particle-size: 25
particle-size: 25
statement: return this.data.length
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: return ()
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: return r
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: if this.size() >= 2 {
    return ();
}
particle-size: 25
particle-size: 25
statement: return this.data.length
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: this.data = this.data ~ [x]
particle-size: 25
statement: return ()
particle-size: 25
particle-size: 25
particle-size: 25
particle-size: 25
statement: this.Q_in.popFront()
particle-size: 297
particle-size: 297
statement: this.data = this.data[1..this.size()]
particle-size: 297
particle-size: 297
statement: return this.data.length
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: return ()
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: this.Q_in.popFront()
particle-size: 297
particle-size: 297
statement: this.data = this.data[1..this.size()]
particle-size: 297
particle-size: 297
statement: return this.data.length
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: return ()
particle-size: 297
particle-size: 297
particle-size: 297
particle-size: 297
statement: return ()
particle-size: 322
particle-size: 322
particle-size: 322
particle-size: 322
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 575
particle-size: 575
statement: return this.data.length
particle-size: 575
particle-size: 575
particle-size: 575
particle-size: 575
statement: this.__H1.__run()
particle-size: 19
particle-size: 19
statement: this.pkt_count = this.pkt_count + 1
particle-size: 19
statement: this.Q_in.popFront()
particle-size: 19
particle-size: 19
statement: this.data = this.data[1..this.size()]
particle-size: 19
particle-size: 19
statement: return this.data.length
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: return ()
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: return ()
particle-size: 19
particle-size: 19
particle-size: 19
particle-size: 19
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 575
particle-size: 575
statement: return this.data.length
particle-size: 575
particle-size: 575
particle-size: 575
particle-size: 575
statement: this.__S0.__run()
particle-size: 83
particle-size: 83
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 83
statement: this.route2 = 3
particle-size: 83
statement: this.route3 = 2 + 1
particle-size: 83
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 83
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 83
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 83
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 83
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 83
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 83
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 83
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 249
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 83
particle-size: 83
statement: r := this.front()
particle-size: 83
particle-size: 83
statement: return this.data[0]
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: this.popFront()
particle-size: 83
particle-size: 83
statement: this.data = this.data[1..this.size()]
particle-size: 83
particle-size: 83
statement: return this.data.length
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: return ()
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: return r
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: if this.size() >= 2 {
    return ();
}
particle-size: 83
particle-size: 83
statement: return this.data.length
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 83
particle-size: 83
particle-size: 83
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 83
particle-size: 83
statement: r := this.front()
particle-size: 83
particle-size: 83
statement: return this.data[0]
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: this.popFront()
particle-size: 83
particle-size: 83
statement: this.data = this.data[1..this.size()]
particle-size: 83
particle-size: 83
statement: return this.data.length
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: return ()
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: return r
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: if this.size() >= 2 {
    return ();
}
particle-size: 83
particle-size: 83
statement: return this.data.length
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 83
particle-size: 83
particle-size: 83
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 83
particle-size: 83
statement: r := this.front()
particle-size: 83
particle-size: 83
statement: return this.data[0]
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: this.popFront()
particle-size: 83
particle-size: 83
statement: this.data = this.data[1..this.size()]
particle-size: 83
particle-size: 83
statement: return this.data.length
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: return ()
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: return r
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: if this.size() >= 2 {
    return ();
}
particle-size: 83
particle-size: 83
statement: return this.data.length
particle-size: 83
particle-size: 83
particle-size: 83
particle-size: 83
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 74
statement: return ()
particle-size: 74
particle-size: 83
particle-size: 83
particle-size: 83
statement: return ()
particle-size: 249
particle-size: 249
particle-size: 249
particle-size: 249
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 741
particle-size: 741
statement: return this.data.length
particle-size: 741
particle-size: 741
particle-size: 741
particle-size: 741
statement: this.__S1.__run()
particle-size: 65
particle-size: 65
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 65
particle-size: 65
statement: r := this.front()
particle-size: 65
particle-size: 65
statement: return this.data[0]
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: this.popFront()
particle-size: 65
particle-size: 65
statement: this.data = this.data[1..this.size()]
particle-size: 65
particle-size: 65
statement: return this.data.length
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: return ()
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: return r
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: if this.size() >= 2 {
    return ();
}
particle-size: 65
particle-size: 65
statement: return this.data.length
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: this.data = this.data ~ [x]
particle-size: 65
statement: return ()
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: return ()
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 741
particle-size: 741
statement: return this.data.length
particle-size: 741
particle-size: 741
particle-size: 741
particle-size: 741
statement: this.__S2.__run()
particle-size: 18
particle-size: 18
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if this.size() >= 2 {
    return ();
}
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 741
particle-size: 741
statement: return this.data.length
particle-size: 741
particle-size: 741
particle-size: 741
particle-size: 741
statement: this.__S3.__run()
particle-size: 68
particle-size: 68
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 68
particle-size: 68
statement: r := this.front()
particle-size: 68
particle-size: 68
statement: return this.data[0]
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: this.popFront()
particle-size: 68
particle-size: 68
statement: this.data = this.data[1..this.size()]
particle-size: 68
particle-size: 68
statement: return this.data.length
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return r
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: if this.size() >= 2 {
    return ();
}
particle-size: 68
particle-size: 68
statement: return this.data.length
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: this.data = this.data ~ [x]
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 1122
particle-size: 1122
particle-size: 1122
particle-size: 497
repetition: 11
statement: __d.__step()
particle-size: 497
particle-size: 497
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
particle-size: 497
statement: (action,node) := this.scheduler()
particle-size: 497
particle-size: 497
statement: actions := ([]: (R × R)[])
particle-size: 497
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 497
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
statement: actions ~= [(0,i)]
particle-size: 446
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
statement: actions ~= [(1,i)]
particle-size: 96
loop-index: 1
particle-size: 497
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
statement: actions ~= [(0,i)]
particle-size: 33
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
loop-index: 2
particle-size: 497
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
statement: actions ~= [(0,i)]
particle-size: 96
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
statement: actions ~= [(1,i)]
particle-size: 285
loop-index: 3
particle-size: 497
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
statement: actions ~= [(0,i)]
particle-size: 100
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
statement: actions ~= [(1,i)]
particle-size: 65
loop-index: 4
particle-size: 497
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
statement: actions ~= [(0,i)]
particle-size: 32
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
statement: actions ~= [(1,i)]
particle-size: 18
loop-index: 5
particle-size: 497
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
statement: actions ~= [(0,i)]
particle-size: 107
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 497
particle-size: 497
statement: return this.data.length
particle-size: 497
particle-size: 497
particle-size: 497
statement: actions ~= [(1,i)]
particle-size: 68
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 1346
particle-size: 1346
particle-size: 1346
particle-size: 1346
particle-size: 1346
particle-size: 1346
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 532
particle-size: 532
statement: return this.data.length
particle-size: 532
particle-size: 532
particle-size: 532
particle-size: 532
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 96
particle-size: 96
statement: r := this.front()
particle-size: 96
particle-size: 96
statement: return this.data[0]
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: this.popFront()
particle-size: 96
particle-size: 96
statement: this.data = this.data[1..this.size()]
particle-size: 96
particle-size: 96
statement: return this.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return r
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 96
particle-size: 96
particle-size: 96
statement: if this.size() >= 2 {
    return ();
}
particle-size: 96
particle-size: 96
statement: return this.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: this.data = this.data ~ [x]
particle-size: 96
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 532
particle-size: 532
statement: return this.data.length
particle-size: 532
particle-size: 532
particle-size: 532
particle-size: 532
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 532
particle-size: 532
statement: return this.data.length
particle-size: 532
particle-size: 532
particle-size: 532
particle-size: 532
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 285
particle-size: 285
statement: r := this.front()
particle-size: 285
particle-size: 285
statement: return this.data[0]
particle-size: 285
particle-size: 285
particle-size: 285
particle-size: 285
particle-size: 285
statement: this.popFront()
particle-size: 285
particle-size: 285
statement: this.data = this.data[1..this.size()]
particle-size: 285
particle-size: 285
statement: return this.data.length
particle-size: 285
particle-size: 285
particle-size: 285
particle-size: 285
particle-size: 285
statement: return ()
particle-size: 285
particle-size: 285
particle-size: 285
particle-size: 285
statement: return r
particle-size: 285
particle-size: 285
particle-size: 285
particle-size: 285
particle-size: 285
particle-size: 285
statement: if port == 1 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: this.__H0.Q_in.pushBack((pkt,1))
particle-size: 95
particle-size: 95
particle-size: 95
statement: if this.size() >= 2 {
    return ();
}
particle-size: 95
particle-size: 95
statement: return this.data.length
particle-size: 95
particle-size: 95
particle-size: 95
particle-size: 95
statement: return ()
particle-size: 62
statement: this.data = this.data ~ [x]
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 95
particle-size: 95
particle-size: 95
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 95
particle-size: 95
particle-size: 95
statement: if this.size() >= 2 {
    return ();
}
particle-size: 95
particle-size: 95
statement: return this.data.length
particle-size: 95
particle-size: 95
particle-size: 95
particle-size: 95
statement: return ()
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 94
statement: return ()
particle-size: 94
particle-size: 95
particle-size: 95
particle-size: 95
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 95
particle-size: 95
particle-size: 95
statement: if this.size() >= 2 {
    return ();
}
particle-size: 95
particle-size: 95
statement: return this.data.length
particle-size: 95
particle-size: 95
particle-size: 95
particle-size: 95
statement: return ()
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 94
statement: return ()
particle-size: 94
particle-size: 95
particle-size: 95
particle-size: 95
statement: if port == 4 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 532
particle-size: 532
statement: return this.data.length
particle-size: 532
particle-size: 532
particle-size: 532
particle-size: 532
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 65
particle-size: 65
statement: r := this.front()
particle-size: 65
particle-size: 65
statement: return this.data[0]
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: this.popFront()
particle-size: 65
particle-size: 65
statement: this.data = this.data[1..this.size()]
particle-size: 65
particle-size: 65
statement: return this.data.length
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: return ()
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: return r
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: this.__S2.Q_in.pushBack((pkt,2))
particle-size: 65
particle-size: 65
particle-size: 65
statement: if this.size() >= 2 {
    return ();
}
particle-size: 65
particle-size: 65
statement: return this.data.length
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: this.data = this.data ~ [x]
particle-size: 65
statement: return ()
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 532
particle-size: 532
statement: return this.data.length
particle-size: 532
particle-size: 532
particle-size: 532
particle-size: 532
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,4));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 18
particle-size: 18
particle-size: 18
statement: if this.size() >= 2 {
    return ();
}
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 532
particle-size: 532
statement: return this.data.length
particle-size: 532
particle-size: 532
particle-size: 532
particle-size: 532
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 68
particle-size: 68
statement: r := this.front()
particle-size: 68
particle-size: 68
statement: return this.data[0]
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: this.popFront()
particle-size: 68
particle-size: 68
statement: this.data = this.data[1..this.size()]
particle-size: 68
particle-size: 68
statement: return this.data.length
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return r
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
particle-size: 68
particle-size: 68
particle-size: 68
statement: if this.size() >= 2 {
    return ();
}
particle-size: 68
particle-size: 68
statement: return this.data.length
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: this.data = this.data ~ [x]
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 814
particle-size: 814
statement: return this.data.length
particle-size: 814
particle-size: 814
particle-size: 814
particle-size: 814
statement: this.__H0.__run()
particle-size: 446
particle-size: 446
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 446
particle-size: 446
statement: return this
particle-size: 446
particle-size: 446
particle-size: 446
particle-size: 446
particle-size: 446
statement: this.data = [x] ~ this.data
particle-size: 446
statement: return ()
particle-size: 446
particle-size: 446
particle-size: 446
particle-size: 446
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 24
particle-size: 24
statement: return this
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this.data = [x] ~ this.data
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this.pkt_count = this.pkt_count + 1
particle-size: 24
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 24
particle-size: 24
statement: r := this.front()
particle-size: 24
particle-size: 24
statement: return this.data[0]
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this.popFront()
particle-size: 24
particle-size: 24
statement: this.data = this.data[1..this.size()]
particle-size: 24
particle-size: 24
statement: return this.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: return r
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: if this.size() >= 2 {
    return ();
}
particle-size: 24
particle-size: 24
statement: return this.data.length
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this.data = this.data ~ [x]
particle-size: 24
statement: return ()
particle-size: 24
particle-size: 24
particle-size: 24
particle-size: 24
statement: this.Q_in.popFront()
particle-size: 422
particle-size: 422
statement: this.data = this.data[1..this.size()]
particle-size: 422
particle-size: 422
statement: return this.data.length
particle-size: 422
particle-size: 422
particle-size: 422
particle-size: 422
particle-size: 422
statement: return ()
particle-size: 422
particle-size: 422
particle-size: 422
particle-size: 422
statement: this.Q_in.popFront()
particle-size: 422
particle-size: 422
statement: this.data = this.data[1..this.size()]
particle-size: 422
particle-size: 422
statement: return this.data.length
particle-size: 422
particle-size: 422
particle-size: 422
particle-size: 422
particle-size: 422
statement: return ()
particle-size: 422
particle-size: 422
particle-size: 422
particle-size: 422
statement: return ()
particle-size: 446
particle-size: 446
particle-size: 446
particle-size: 446
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 814
particle-size: 814
statement: return this.data.length
particle-size: 814
particle-size: 814
particle-size: 814
particle-size: 814
statement: this.__H1.__run()
particle-size: 33
particle-size: 33
statement: this.pkt_count = this.pkt_count + 1
particle-size: 33
statement: this.Q_in.popFront()
particle-size: 33
particle-size: 33
statement: this.data = this.data[1..this.size()]
particle-size: 33
particle-size: 33
statement: return this.data.length
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: return ()
particle-size: 33
particle-size: 33
particle-size: 33
particle-size: 33
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 814
particle-size: 814
statement: return this.data.length
particle-size: 814
particle-size: 814
particle-size: 814
particle-size: 814
statement: this.__S0.__run()
particle-size: 96
particle-size: 96
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 96
statement: this.route2 = 3
particle-size: 96
statement: this.route3 = 2 + 1
particle-size: 96
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 96
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 96
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 96
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 96
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 96
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 96
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 96
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 288
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 96
particle-size: 96
statement: r := this.front()
particle-size: 96
particle-size: 96
statement: return this.data[0]
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: this.popFront()
particle-size: 96
particle-size: 96
statement: this.data = this.data[1..this.size()]
particle-size: 96
particle-size: 96
statement: return this.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return r
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: if this.size() >= 2 {
    return ();
}
particle-size: 96
particle-size: 96
statement: return this.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 87
statement: return ()
particle-size: 87
particle-size: 96
particle-size: 96
particle-size: 96
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 96
particle-size: 96
statement: r := this.front()
particle-size: 96
particle-size: 96
statement: return this.data[0]
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: this.popFront()
particle-size: 96
particle-size: 96
statement: this.data = this.data[1..this.size()]
particle-size: 96
particle-size: 96
statement: return this.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return r
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: if this.size() >= 2 {
    return ();
}
particle-size: 96
particle-size: 96
statement: return this.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 87
statement: return ()
particle-size: 87
particle-size: 96
particle-size: 96
particle-size: 96
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 96
particle-size: 96
statement: r := this.front()
particle-size: 96
particle-size: 96
statement: return this.data[0]
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: this.popFront()
particle-size: 96
particle-size: 96
statement: this.data = this.data[1..this.size()]
particle-size: 96
particle-size: 96
statement: return this.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return r
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: if this.size() >= 2 {
    return ();
}
particle-size: 96
particle-size: 96
statement: return this.data.length
particle-size: 96
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 9
statement: this.data = this.data ~ [x]
particle-size: 87
statement: return ()
particle-size: 87
particle-size: 96
particle-size: 96
particle-size: 96
statement: return ()
particle-size: 288
particle-size: 288
particle-size: 288
particle-size: 288
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 1006
particle-size: 1006
statement: return this.data.length
particle-size: 1006
particle-size: 1006
particle-size: 1006
particle-size: 1006
statement: this.__S1.__run()
particle-size: 100
particle-size: 100
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 100
particle-size: 100
statement: r := this.front()
particle-size: 100
particle-size: 100
statement: return this.data[0]
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this.popFront()
particle-size: 100
particle-size: 100
statement: this.data = this.data[1..this.size()]
particle-size: 100
particle-size: 100
statement: return this.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return r
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: if this.size() >= 2 {
    return ();
}
particle-size: 100
particle-size: 100
statement: return this.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this.data = this.data ~ [x]
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 1006
particle-size: 1006
statement: return this.data.length
particle-size: 1006
particle-size: 1006
particle-size: 1006
particle-size: 1006
statement: this.__S2.__run()
particle-size: 32
particle-size: 32
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 32
particle-size: 32
statement: r := this.front()
particle-size: 32
particle-size: 32
statement: return this.data[0]
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this.popFront()
particle-size: 32
particle-size: 32
statement: this.data = this.data[1..this.size()]
particle-size: 32
particle-size: 32
statement: return this.data.length
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return r
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if this.size() >= 2 {
    return ();
}
particle-size: 32
particle-size: 32
statement: return this.data.length
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this.data = this.data ~ [x]
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 1006
particle-size: 1006
statement: return this.data.length
particle-size: 1006
particle-size: 1006
particle-size: 1006
particle-size: 1006
statement: this.__S3.__run()
particle-size: 107
particle-size: 107
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 107
particle-size: 107
statement: r := this.front()
particle-size: 107
particle-size: 107
statement: return this.data[0]
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: this.popFront()
particle-size: 107
particle-size: 107
statement: this.data = this.data[1..this.size()]
particle-size: 107
particle-size: 107
statement: return this.data.length
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: return ()
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: return r
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: if this.size() >= 2 {
    return ();
}
particle-size: 107
particle-size: 107
statement: return this.data.length
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: this.data = this.data ~ [x]
particle-size: 107
statement: return ()
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: return ()
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: return ()
particle-size: 1538
particle-size: 1538
particle-size: 1538
particle-size: 664
repetition: 12
statement: __d.__step()
particle-size: 664
particle-size: 664
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: return this.data.length
particle-size: 664
particle-size: 664
particle-size: 664
particle-size: 664
statement: (action,node) := this.scheduler()
particle-size: 663
particle-size: 663
statement: actions := ([]: (R × R)[])
particle-size: 663
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 663
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
statement: actions ~= [(0,i)]
particle-size: 572
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
statement: actions ~= [(1,i)]
particle-size: 106
loop-index: 1
particle-size: 663
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
statement: actions ~= [(0,i)]
particle-size: 68
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
loop-index: 2
particle-size: 663
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
statement: actions ~= [(0,i)]
particle-size: 104
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
statement: actions ~= [(1,i)]
particle-size: 339
loop-index: 3
particle-size: 663
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
statement: actions ~= [(0,i)]
particle-size: 133
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
statement: actions ~= [(1,i)]
particle-size: 100
loop-index: 4
particle-size: 663
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
statement: actions ~= [(0,i)]
particle-size: 65
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
statement: actions ~= [(1,i)]
particle-size: 32
loop-index: 5
particle-size: 663
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
statement: actions ~= [(0,i)]
particle-size: 151
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 663
particle-size: 663
statement: return this.data.length
particle-size: 663
particle-size: 663
particle-size: 663
statement: actions ~= [(1,i)]
particle-size: 107
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 1777
particle-size: 1777
particle-size: 1777
particle-size: 1777
particle-size: 1777
particle-size: 1777
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 684
particle-size: 684
statement: return this.data.length
particle-size: 684
particle-size: 684
particle-size: 684
particle-size: 684
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 106
particle-size: 106
statement: r := this.front()
particle-size: 106
particle-size: 106
statement: return this.data[0]
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: this.popFront()
particle-size: 106
particle-size: 106
statement: this.data = this.data[1..this.size()]
particle-size: 106
particle-size: 106
statement: return this.data.length
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: return ()
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: return r
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 106
particle-size: 106
particle-size: 106
statement: if this.size() >= 2 {
    return ();
}
particle-size: 106
particle-size: 106
statement: return this.data.length
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: this.data = this.data ~ [x]
particle-size: 106
statement: return ()
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 684
particle-size: 684
statement: return this.data.length
particle-size: 684
particle-size: 684
particle-size: 684
particle-size: 684
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 684
particle-size: 684
statement: return this.data.length
particle-size: 684
particle-size: 684
particle-size: 684
particle-size: 684
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 339
particle-size: 339
statement: r := this.front()
particle-size: 339
particle-size: 339
statement: return this.data[0]
particle-size: 339
particle-size: 339
particle-size: 339
particle-size: 339
particle-size: 339
statement: this.popFront()
particle-size: 339
particle-size: 339
statement: this.data = this.data[1..this.size()]
particle-size: 339
particle-size: 339
statement: return this.data.length
particle-size: 339
particle-size: 339
particle-size: 339
particle-size: 339
particle-size: 339
statement: return ()
particle-size: 339
particle-size: 339
particle-size: 339
particle-size: 339
statement: return r
particle-size: 339
particle-size: 339
particle-size: 339
particle-size: 339
particle-size: 339
particle-size: 339
statement: if port == 1 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: this.__H0.Q_in.pushBack((pkt,1))
particle-size: 113
particle-size: 113
particle-size: 113
statement: if this.size() >= 2 {
    return ();
}
particle-size: 113
particle-size: 113
statement: return this.data.length
particle-size: 113
particle-size: 113
particle-size: 113
particle-size: 113
statement: return ()
particle-size: 65
statement: this.data = this.data ~ [x]
particle-size: 48
statement: return ()
particle-size: 48
particle-size: 113
particle-size: 113
particle-size: 113
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 113
particle-size: 113
particle-size: 113
statement: if this.size() >= 2 {
    return ();
}
particle-size: 113
particle-size: 113
statement: return this.data.length
particle-size: 113
particle-size: 113
particle-size: 113
particle-size: 113
statement: return ()
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 113
particle-size: 113
particle-size: 113
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 113
particle-size: 113
particle-size: 113
statement: if this.size() >= 2 {
    return ();
}
particle-size: 113
particle-size: 113
statement: return this.data.length
particle-size: 113
particle-size: 113
particle-size: 113
particle-size: 113
statement: return ()
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 113
particle-size: 113
particle-size: 113
statement: if port == 4 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 684
particle-size: 684
statement: return this.data.length
particle-size: 684
particle-size: 684
particle-size: 684
particle-size: 684
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 100
particle-size: 100
statement: r := this.front()
particle-size: 100
particle-size: 100
statement: return this.data[0]
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this.popFront()
particle-size: 100
particle-size: 100
statement: this.data = this.data[1..this.size()]
particle-size: 100
particle-size: 100
statement: return this.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return r
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: this.__S2.Q_in.pushBack((pkt,2))
particle-size: 100
particle-size: 100
particle-size: 100
statement: if this.size() >= 2 {
    return ();
}
particle-size: 100
particle-size: 100
statement: return this.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this.data = this.data ~ [x]
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 684
particle-size: 684
statement: return this.data.length
particle-size: 684
particle-size: 684
particle-size: 684
particle-size: 684
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 32
particle-size: 32
statement: r := this.front()
particle-size: 32
particle-size: 32
statement: return this.data[0]
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this.popFront()
particle-size: 32
particle-size: 32
statement: this.data = this.data[1..this.size()]
particle-size: 32
particle-size: 32
statement: return this.data.length
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: return r
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,4));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 32
particle-size: 32
particle-size: 32
statement: if this.size() >= 2 {
    return ();
}
particle-size: 32
particle-size: 32
statement: return this.data.length
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: this.data = this.data ~ [x]
particle-size: 32
statement: return ()
particle-size: 32
particle-size: 32
particle-size: 32
particle-size: 32
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 684
particle-size: 684
statement: return this.data.length
particle-size: 684
particle-size: 684
particle-size: 684
particle-size: 684
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 107
particle-size: 107
statement: r := this.front()
particle-size: 107
particle-size: 107
statement: return this.data[0]
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: this.popFront()
particle-size: 107
particle-size: 107
statement: this.data = this.data[1..this.size()]
particle-size: 107
particle-size: 107
statement: return this.data.length
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: return ()
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: return r
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
particle-size: 107
particle-size: 107
particle-size: 107
statement: if this.size() >= 2 {
    return ();
}
particle-size: 107
particle-size: 107
statement: return this.data.length
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: this.data = this.data ~ [x]
particle-size: 107
statement: return ()
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 1093
particle-size: 1093
statement: return this.data.length
particle-size: 1093
particle-size: 1093
particle-size: 1093
particle-size: 1093
statement: this.__H0.__run()
particle-size: 572
particle-size: 572
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 572
particle-size: 572
statement: return this
particle-size: 572
particle-size: 572
particle-size: 572
particle-size: 572
particle-size: 572
statement: this.data = [x] ~ this.data
particle-size: 572
statement: return ()
particle-size: 572
particle-size: 572
particle-size: 572
particle-size: 572
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 22
particle-size: 22
statement: return this
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this.data = [x] ~ this.data
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this.pkt_count = this.pkt_count + 1
particle-size: 22
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 22
particle-size: 22
statement: r := this.front()
particle-size: 22
particle-size: 22
statement: return this.data[0]
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this.popFront()
particle-size: 22
particle-size: 22
statement: this.data = this.data[1..this.size()]
particle-size: 22
particle-size: 22
statement: return this.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: return r
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: if this.size() >= 2 {
    return ();
}
particle-size: 22
particle-size: 22
statement: return this.data.length
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this.data = this.data ~ [x]
particle-size: 22
statement: return ()
particle-size: 22
particle-size: 22
particle-size: 22
particle-size: 22
statement: this.Q_in.popFront()
particle-size: 550
particle-size: 550
statement: this.data = this.data[1..this.size()]
particle-size: 550
particle-size: 550
statement: return this.data.length
particle-size: 550
particle-size: 550
particle-size: 550
particle-size: 550
particle-size: 550
statement: return ()
particle-size: 550
particle-size: 550
particle-size: 550
particle-size: 550
statement: this.Q_in.popFront()
particle-size: 550
particle-size: 550
statement: this.data = this.data[1..this.size()]
particle-size: 550
particle-size: 550
statement: return this.data.length
particle-size: 550
particle-size: 550
particle-size: 550
particle-size: 550
particle-size: 550
statement: return ()
particle-size: 550
particle-size: 550
particle-size: 550
particle-size: 550
statement: return ()
particle-size: 572
particle-size: 572
particle-size: 572
particle-size: 572
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 1093
particle-size: 1093
statement: return this.data.length
particle-size: 1093
particle-size: 1093
particle-size: 1093
particle-size: 1093
statement: this.__H1.__run()
particle-size: 68
particle-size: 68
statement: this.pkt_count = this.pkt_count + 1
particle-size: 68
statement: this.Q_in.popFront()
particle-size: 68
particle-size: 68
statement: this.data = this.data[1..this.size()]
particle-size: 68
particle-size: 68
statement: return this.data.length
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: return ()
particle-size: 68
particle-size: 68
particle-size: 68
particle-size: 68
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 1093
particle-size: 1093
statement: return this.data.length
particle-size: 1093
particle-size: 1093
particle-size: 1093
particle-size: 1093
statement: this.__S0.__run()
particle-size: 104
particle-size: 104
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 104
statement: this.route2 = 3
particle-size: 104
statement: this.route3 = 2 + 1
particle-size: 104
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 104
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 104
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 104
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 104
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 104
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 104
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 104
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 312
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 104
particle-size: 104
statement: r := this.front()
particle-size: 104
particle-size: 104
statement: return this.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this.popFront()
particle-size: 104
particle-size: 104
statement: this.data = this.data[1..this.size()]
particle-size: 104
particle-size: 104
statement: return this.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: if this.size() >= 2 {
    return ();
}
particle-size: 104
particle-size: 104
statement: return this.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this.data = this.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 104
particle-size: 104
statement: r := this.front()
particle-size: 104
particle-size: 104
statement: return this.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this.popFront()
particle-size: 104
particle-size: 104
statement: this.data = this.data[1..this.size()]
particle-size: 104
particle-size: 104
statement: return this.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: if this.size() >= 2 {
    return ();
}
particle-size: 104
particle-size: 104
statement: return this.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this.data = this.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 104
particle-size: 104
statement: r := this.front()
particle-size: 104
particle-size: 104
statement: return this.data[0]
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this.popFront()
particle-size: 104
particle-size: 104
statement: this.data = this.data[1..this.size()]
particle-size: 104
particle-size: 104
statement: return this.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return r
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: if this.size() >= 2 {
    return ();
}
particle-size: 104
particle-size: 104
statement: return this.data.length
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: this.data = this.data ~ [x]
particle-size: 104
statement: return ()
particle-size: 104
particle-size: 104
particle-size: 104
particle-size: 104
statement: return ()
particle-size: 312
particle-size: 312
particle-size: 312
particle-size: 312
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 1301
particle-size: 1301
statement: return this.data.length
particle-size: 1301
particle-size: 1301
particle-size: 1301
particle-size: 1301
statement: this.__S1.__run()
particle-size: 133
particle-size: 133
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 133
particle-size: 133
statement: r := this.front()
particle-size: 133
particle-size: 133
statement: return this.data[0]
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
statement: this.popFront()
particle-size: 133
particle-size: 133
statement: this.data = this.data[1..this.size()]
particle-size: 133
particle-size: 133
statement: return this.data.length
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
statement: return ()
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
statement: return r
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
statement: if this.size() >= 2 {
    return ();
}
particle-size: 133
particle-size: 133
statement: return this.data.length
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
statement: this.data = this.data ~ [x]
particle-size: 133
statement: return ()
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
statement: return ()
particle-size: 133
particle-size: 133
particle-size: 133
particle-size: 133
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 1301
particle-size: 1301
statement: return this.data.length
particle-size: 1301
particle-size: 1301
particle-size: 1301
particle-size: 1301
statement: this.__S2.__run()
particle-size: 65
particle-size: 65
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 65
particle-size: 65
statement: r := this.front()
particle-size: 65
particle-size: 65
statement: return this.data[0]
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: this.popFront()
particle-size: 65
particle-size: 65
statement: this.data = this.data[1..this.size()]
particle-size: 65
particle-size: 65
statement: return this.data.length
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: return ()
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: return r
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: if this.size() >= 2 {
    return ();
}
particle-size: 65
particle-size: 65
statement: return this.data.length
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: this.data = this.data ~ [x]
particle-size: 65
statement: return ()
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: return ()
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 1301
particle-size: 1301
statement: return this.data.length
particle-size: 1301
particle-size: 1301
particle-size: 1301
particle-size: 1301
statement: this.__S3.__run()
particle-size: 151
particle-size: 151
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 151
particle-size: 151
statement: r := this.front()
particle-size: 151
particle-size: 151
statement: return this.data[0]
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
statement: this.popFront()
particle-size: 151
particle-size: 151
statement: this.data = this.data[1..this.size()]
particle-size: 151
particle-size: 151
statement: return this.data.length
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
statement: return ()
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
statement: return r
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
statement: if this.size() >= 2 {
    return ();
}
particle-size: 151
particle-size: 151
statement: return this.data.length
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
statement: this.data = this.data ~ [x]
particle-size: 151
statement: return ()
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
statement: return ()
particle-size: 151
particle-size: 151
particle-size: 151
particle-size: 151
statement: return ()
particle-size: 1986
particle-size: 1986
particle-size: 1986
particle-size: 796
repetition: 13
statement: __d.__step()
particle-size: 796
particle-size: 796
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: return this.data.length
particle-size: 796
particle-size: 796
particle-size: 796
particle-size: 796
statement: (action,node) := this.scheduler()
particle-size: 795
particle-size: 795
statement: actions := ([]: (R × R)[])
particle-size: 795
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 795
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
statement: actions ~= [(0,i)]
particle-size: 662
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
statement: actions ~= [(1,i)]
particle-size: 106
loop-index: 1
particle-size: 795
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
statement: actions ~= [(0,i)]
particle-size: 107
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
loop-index: 2
particle-size: 795
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
statement: actions ~= [(0,i)]
particle-size: 112
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
statement: actions ~= [(1,i)]
particle-size: 357
loop-index: 3
particle-size: 795
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
statement: actions ~= [(0,i)]
particle-size: 155
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
statement: actions ~= [(1,i)]
particle-size: 134
loop-index: 4
particle-size: 795
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
statement: actions ~= [(0,i)]
particle-size: 100
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
statement: actions ~= [(1,i)]
particle-size: 65
loop-index: 5
particle-size: 795
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
statement: actions ~= [(0,i)]
particle-size: 187
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 795
particle-size: 795
statement: return this.data.length
particle-size: 795
particle-size: 795
particle-size: 795
statement: actions ~= [(1,i)]
particle-size: 152
statement: return actions[uniformInt(0,actions.length - 1)]
particle-size: 2137
particle-size: 2137
particle-size: 2137
particle-size: 2137
particle-size: 2137
particle-size: 2137
statement: if action {
    if node == 0 && this.__H0.Q_out.size() {
        (pkt,port) := this.__H0.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,1));
        }
    }
    if node == 1 && this.__H1.Q_out.size() {
        (pkt,port) := this.__H1.Q_out.takeFront();
        if port == 1 {
            this.__S3.Q_in.pushBack((pkt,3));
        }
    }
    if node == 2 && this.__S0.Q_out.size() {
        (pkt,port) := this.__S0.Q_out.takeFront();
        if port == 1 {
            this.__H0.Q_in.pushBack((pkt,1));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,1));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,1));
        }
        if port == 4 {
            this.__S2.Q_in.pushBack((pkt,1));
        }
    }
    if node == 3 && this.__S1.Q_out.size() {
        (pkt,port) := this.__S1.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,2));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,2));
        }
    }
    if node == 4 && this.__S2.Q_out.size() {
        (pkt,port) := this.__S2.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,4));
        }
        if port == 2 {
            this.__S1.Q_in.pushBack((pkt,2));
        }
        if port == 3 {
            this.__S3.Q_in.pushBack((pkt,2));
        }
    }
    if node == 5 && this.__S3.Q_out.size() {
        (pkt,port) := this.__S3.Q_out.takeFront();
        if port == 1 {
            this.__S0.Q_in.pushBack((pkt,3));
        }
        if port == 2 {
            this.__S2.Q_in.pushBack((pkt,3));
        }
        if port == 3 {
            this.__H1.Q_in.pushBack((pkt,1));
        }
    }
} else {
    if node == 0 && this.__H0.Q_in.size() {
        this.__H0.__run();
    }
    if node == 1 && this.__H1.Q_in.size() {
        this.__H1.__run();
    }
    if node == 2 && this.__S0.Q_in.size() {
        this.__S0.__run();
    }
    if node == 3 && this.__S1.Q_in.size() {
        this.__S1.__run();
    }
    if node == 4 && this.__S2.Q_in.size() {
        this.__S2.__run();
    }
    if node == 5 && this.__S3.Q_in.size() {
        this.__S3.__run();
    }
}
statement: if node == 0 && this.__H0.Q_out.size() {
    (pkt,port) := this.__H0.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,1));
    }
}
particle-size: 814
particle-size: 814
statement: return this.data.length
particle-size: 814
particle-size: 814
particle-size: 814
particle-size: 814
statement: (pkt,port) := this.__H0.Q_out.takeFront()
particle-size: 106
particle-size: 106
statement: r := this.front()
particle-size: 106
particle-size: 106
statement: return this.data[0]
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: this.popFront()
particle-size: 106
particle-size: 106
statement: this.data = this.data[1..this.size()]
particle-size: 106
particle-size: 106
statement: return this.data.length
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: return ()
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: return r
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,1));
}
statement: this.__S0.Q_in.pushBack((pkt,1))
particle-size: 106
particle-size: 106
particle-size: 106
statement: if this.size() >= 2 {
    return ();
}
particle-size: 106
particle-size: 106
statement: return this.data.length
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: this.data = this.data ~ [x]
particle-size: 106
statement: return ()
particle-size: 106
particle-size: 106
particle-size: 106
particle-size: 106
statement: if node == 1 && this.__H1.Q_out.size() {
    (pkt,port) := this.__H1.Q_out.takeFront();
    if port == 1 {
        this.__S3.Q_in.pushBack((pkt,3));
    }
}
particle-size: 814
particle-size: 814
statement: return this.data.length
particle-size: 814
particle-size: 814
particle-size: 814
particle-size: 814
statement: if node == 2 && this.__S0.Q_out.size() {
    (pkt,port) := this.__S0.Q_out.takeFront();
    if port == 1 {
        this.__H0.Q_in.pushBack((pkt,1));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,1));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,1));
    }
    if port == 4 {
        this.__S2.Q_in.pushBack((pkt,1));
    }
}
particle-size: 814
particle-size: 814
statement: return this.data.length
particle-size: 814
particle-size: 814
particle-size: 814
particle-size: 814
statement: (pkt,port) := this.__S0.Q_out.takeFront()
particle-size: 357
particle-size: 357
statement: r := this.front()
particle-size: 357
particle-size: 357
statement: return this.data[0]
particle-size: 357
particle-size: 357
particle-size: 357
particle-size: 357
particle-size: 357
statement: this.popFront()
particle-size: 357
particle-size: 357
statement: this.data = this.data[1..this.size()]
particle-size: 357
particle-size: 357
statement: return this.data.length
particle-size: 357
particle-size: 357
particle-size: 357
particle-size: 357
particle-size: 357
statement: return ()
particle-size: 357
particle-size: 357
particle-size: 357
particle-size: 357
statement: return r
particle-size: 357
particle-size: 357
particle-size: 357
particle-size: 357
particle-size: 357
particle-size: 357
statement: if port == 1 {
    this.__H0.Q_in.pushBack((pkt,1));
}
statement: this.__H0.Q_in.pushBack((pkt,1))
particle-size: 119
particle-size: 119
particle-size: 119
statement: if this.size() >= 2 {
    return ();
}
particle-size: 119
particle-size: 119
statement: return this.data.length
particle-size: 119
particle-size: 119
particle-size: 119
particle-size: 119
statement: return ()
particle-size: 60
statement: this.data = this.data ~ [x]
particle-size: 59
statement: return ()
particle-size: 59
particle-size: 119
particle-size: 119
particle-size: 119
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,1));
}
statement: this.__S1.Q_in.pushBack((pkt,1))
particle-size: 119
particle-size: 119
particle-size: 119
statement: if this.size() >= 2 {
    return ();
}
particle-size: 119
particle-size: 119
statement: return this.data.length
particle-size: 119
particle-size: 119
particle-size: 119
particle-size: 119
statement: return ()
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 118
statement: return ()
particle-size: 118
particle-size: 119
particle-size: 119
particle-size: 119
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,1));
}
statement: this.__S3.Q_in.pushBack((pkt,1))
particle-size: 119
particle-size: 119
particle-size: 119
statement: if this.size() >= 2 {
    return ();
}
particle-size: 119
particle-size: 119
statement: return this.data.length
particle-size: 119
particle-size: 119
particle-size: 119
particle-size: 119
statement: return ()
particle-size: 1
statement: this.data = this.data ~ [x]
particle-size: 118
statement: return ()
particle-size: 118
particle-size: 119
particle-size: 119
particle-size: 119
statement: if port == 4 {
    this.__S2.Q_in.pushBack((pkt,1));
}
statement: if node == 3 && this.__S1.Q_out.size() {
    (pkt,port) := this.__S1.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,2));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,2));
    }
}
particle-size: 814
particle-size: 814
statement: return this.data.length
particle-size: 814
particle-size: 814
particle-size: 814
particle-size: 814
statement: (pkt,port) := this.__S1.Q_out.takeFront()
particle-size: 134
particle-size: 134
statement: r := this.front()
particle-size: 134
particle-size: 134
statement: return this.data[0]
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: this.popFront()
particle-size: 134
particle-size: 134
statement: this.data = this.data[1..this.size()]
particle-size: 134
particle-size: 134
statement: return this.data.length
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: return ()
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: return r
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,2));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,2));
}
statement: this.__S2.Q_in.pushBack((pkt,2))
particle-size: 134
particle-size: 134
particle-size: 134
statement: if this.size() >= 2 {
    return ();
}
particle-size: 134
particle-size: 134
statement: return this.data.length
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: this.data = this.data ~ [x]
particle-size: 134
statement: return ()
particle-size: 134
particle-size: 134
particle-size: 134
particle-size: 134
statement: if node == 4 && this.__S2.Q_out.size() {
    (pkt,port) := this.__S2.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,4));
    }
    if port == 2 {
        this.__S1.Q_in.pushBack((pkt,2));
    }
    if port == 3 {
        this.__S3.Q_in.pushBack((pkt,2));
    }
}
particle-size: 814
particle-size: 814
statement: return this.data.length
particle-size: 814
particle-size: 814
particle-size: 814
particle-size: 814
statement: (pkt,port) := this.__S2.Q_out.takeFront()
particle-size: 65
particle-size: 65
statement: r := this.front()
particle-size: 65
particle-size: 65
statement: return this.data[0]
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: this.popFront()
particle-size: 65
particle-size: 65
statement: this.data = this.data[1..this.size()]
particle-size: 65
particle-size: 65
statement: return this.data.length
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: return ()
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: return r
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,4));
}
statement: if port == 2 {
    this.__S1.Q_in.pushBack((pkt,2));
}
statement: if port == 3 {
    this.__S3.Q_in.pushBack((pkt,2));
}
statement: this.__S3.Q_in.pushBack((pkt,2))
particle-size: 65
particle-size: 65
particle-size: 65
statement: if this.size() >= 2 {
    return ();
}
particle-size: 65
particle-size: 65
statement: return this.data.length
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: this.data = this.data ~ [x]
particle-size: 65
statement: return ()
particle-size: 65
particle-size: 65
particle-size: 65
particle-size: 65
statement: if node == 5 && this.__S3.Q_out.size() {
    (pkt,port) := this.__S3.Q_out.takeFront();
    if port == 1 {
        this.__S0.Q_in.pushBack((pkt,3));
    }
    if port == 2 {
        this.__S2.Q_in.pushBack((pkt,3));
    }
    if port == 3 {
        this.__H1.Q_in.pushBack((pkt,1));
    }
}
particle-size: 814
particle-size: 814
statement: return this.data.length
particle-size: 814
particle-size: 814
particle-size: 814
particle-size: 814
statement: (pkt,port) := this.__S3.Q_out.takeFront()
particle-size: 152
particle-size: 152
statement: r := this.front()
particle-size: 152
particle-size: 152
statement: return this.data[0]
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this.popFront()
particle-size: 152
particle-size: 152
statement: this.data = this.data[1..this.size()]
particle-size: 152
particle-size: 152
statement: return this.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: return r
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: if port == 1 {
    this.__S0.Q_in.pushBack((pkt,3));
}
statement: if port == 2 {
    this.__S2.Q_in.pushBack((pkt,3));
}
statement: if port == 3 {
    this.__H1.Q_in.pushBack((pkt,1));
}
statement: this.__H1.Q_in.pushBack((pkt,1))
particle-size: 152
particle-size: 152
particle-size: 152
statement: if this.size() >= 2 {
    return ();
}
particle-size: 152
particle-size: 152
statement: return this.data.length
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: this.data = this.data ~ [x]
particle-size: 152
statement: return ()
particle-size: 152
particle-size: 152
particle-size: 152
particle-size: 152
statement: if node == 0 && this.__H0.Q_in.size() {
    this.__H0.__run();
}
particle-size: 1323
particle-size: 1323
statement: return this.data.length
particle-size: 1323
particle-size: 1323
particle-size: 1323
particle-size: 1323
statement: this.__H0.__run()
particle-size: 662
particle-size: 662
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 662
particle-size: 662
statement: return this
particle-size: 662
particle-size: 662
particle-size: 662
particle-size: 662
particle-size: 662
statement: this.data = [x] ~ this.data
particle-size: 662
statement: return ()
particle-size: 662
particle-size: 662
particle-size: 662
particle-size: 662
statement: if this.pkt_count < 3 {
    this.Q_in.pushFront((Packet'(),0));
    this.pkt_count = this.pkt_count + 1;
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else {
    this.Q_in.popFront();
    this.Q_in.popFront();
}
statement: this.Q_in.pushFront((Packet'(),0))
particle-size: 18
particle-size: 18
statement: return this
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = [x] ~ this.data
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.pkt_count = this.pkt_count + 1
particle-size: 18
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 18
particle-size: 18
statement: r := this.front()
particle-size: 18
particle-size: 18
statement: return this.data[0]
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.popFront()
particle-size: 18
particle-size: 18
statement: this.data = this.data[1..this.size()]
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: return r
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: if this.size() >= 2 {
    return ();
}
particle-size: 18
particle-size: 18
statement: return this.data.length
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.data = this.data ~ [x]
particle-size: 18
statement: return ()
particle-size: 18
particle-size: 18
particle-size: 18
particle-size: 18
statement: this.Q_in.popFront()
particle-size: 644
particle-size: 644
statement: this.data = this.data[1..this.size()]
particle-size: 644
particle-size: 644
statement: return this.data.length
particle-size: 644
particle-size: 644
particle-size: 644
particle-size: 644
particle-size: 644
statement: return ()
particle-size: 644
particle-size: 644
particle-size: 644
particle-size: 644
statement: this.Q_in.popFront()
particle-size: 644
particle-size: 644
statement: this.data = this.data[1..this.size()]
particle-size: 644
particle-size: 644
statement: return this.data.length
particle-size: 644
particle-size: 644
particle-size: 644
particle-size: 644
particle-size: 644
statement: return ()
particle-size: 644
particle-size: 644
particle-size: 644
particle-size: 644
statement: return ()
particle-size: 662
particle-size: 662
particle-size: 662
particle-size: 662
statement: if node == 1 && this.__H1.Q_in.size() {
    this.__H1.__run();
}
particle-size: 1323
particle-size: 1323
statement: return this.data.length
particle-size: 1323
particle-size: 1323
particle-size: 1323
particle-size: 1323
statement: this.__H1.__run()
particle-size: 107
particle-size: 107
statement: this.pkt_count = this.pkt_count + 1
particle-size: 107
statement: this.Q_in.popFront()
particle-size: 107
particle-size: 107
statement: this.data = this.data[1..this.size()]
particle-size: 107
particle-size: 107
statement: return this.data.length
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: return ()
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: return ()
particle-size: 107
particle-size: 107
particle-size: 107
particle-size: 107
statement: if node == 2 && this.__S0.Q_in.size() {
    this.__S0.__run();
}
particle-size: 1323
particle-size: 1323
statement: return this.data.length
particle-size: 1323
particle-size: 1323
particle-size: 1323
particle-size: 1323
statement: this.__S0.__run()
particle-size: 112
particle-size: 112
statement: if this.Q_in.data[0][1] == 1 {
    this.route1 = 1 + 1 + 1;
    this.route2 = 3;
    this.route3 = 2 + 1;
    this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3;
    this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3;
    this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2;
    this.nshortest = this.shortest1 + this.shortest2 + this.shortest3;
    for i in [1..3]{
        if (i == this.nshortest) {
            this.which = uniformInt(1,i);
        }
    }
    if this.which == this.shortest1 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
    } else if this.which == this.shortest1 + this.shortest2 {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
    } else {
        this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
    }
}
statement: this.route1 = 1 + 1 + 1
particle-size: 112
statement: this.route2 = 3
particle-size: 112
statement: this.route3 = 2 + 1
particle-size: 112
statement: this.shortest1 = this.route1 <= this.route2 && this.route2 <= this.route3
particle-size: 112
statement: this.shortest2 = this.route2 <= this.route1 && this.route2 <= this.route3
particle-size: 112
statement: this.shortest3 = this.route3 <= this.route1 && this.route3 <= this.route2
particle-size: 112
statement: this.nshortest = this.shortest1 + this.shortest2 + this.shortest3
particle-size: 112
statement: for i in [1..3]{
    if (i == this.nshortest) {
        this.which = uniformInt(1,i);
    }
}
loop-index: 1
particle-size: 112
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 2
particle-size: 112
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
loop-index: 3
particle-size: 112
statement: if (i == this.nshortest) {
    this.which = uniformInt(1,i);
}
statement: this.which = uniformInt(1,i)
particle-size: 336
statement: if this.which == this.shortest1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],1));
} else if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],1))
particle-size: 112
particle-size: 112
statement: r := this.front()
particle-size: 112
particle-size: 112
statement: return this.data[0]
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this.popFront()
particle-size: 112
particle-size: 112
statement: this.data = this.data[1..this.size()]
particle-size: 112
particle-size: 112
statement: return this.data.length
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return r
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: if this.size() >= 2 {
    return ();
}
particle-size: 112
particle-size: 112
statement: return this.data.length
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this.data = this.data ~ [x]
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: if this.which == this.shortest1 + this.shortest2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
} else {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 112
particle-size: 112
statement: r := this.front()
particle-size: 112
particle-size: 112
statement: return this.data[0]
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this.popFront()
particle-size: 112
particle-size: 112
statement: this.data = this.data[1..this.size()]
particle-size: 112
particle-size: 112
statement: return this.data.length
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return r
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: if this.size() >= 2 {
    return ();
}
particle-size: 112
particle-size: 112
statement: return this.data.length
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this.data = this.data ~ [x]
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 112
particle-size: 112
statement: r := this.front()
particle-size: 112
particle-size: 112
statement: return this.data[0]
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this.popFront()
particle-size: 112
particle-size: 112
statement: this.data = this.data[1..this.size()]
particle-size: 112
particle-size: 112
statement: return this.data.length
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return r
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: if this.size() >= 2 {
    return ();
}
particle-size: 112
particle-size: 112
statement: return this.data.length
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: this.data = this.data ~ [x]
particle-size: 112
statement: return ()
particle-size: 112
particle-size: 112
particle-size: 112
particle-size: 112
statement: return ()
particle-size: 336
particle-size: 336
particle-size: 336
particle-size: 336
statement: if node == 3 && this.__S1.Q_in.size() {
    this.__S1.__run();
}
particle-size: 1547
particle-size: 1547
statement: return this.data.length
particle-size: 1547
particle-size: 1547
particle-size: 1547
particle-size: 1547
statement: this.__S1.__run()
particle-size: 155
particle-size: 155
statement: if this.Q_in.data[0][1] == 1 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],2));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],2))
particle-size: 155
particle-size: 155
statement: r := this.front()
particle-size: 155
particle-size: 155
statement: return this.data[0]
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
statement: this.popFront()
particle-size: 155
particle-size: 155
statement: this.data = this.data[1..this.size()]
particle-size: 155
particle-size: 155
statement: return this.data.length
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
statement: return ()
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
statement: return r
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
statement: if this.size() >= 2 {
    return ();
}
particle-size: 155
particle-size: 155
statement: return this.data.length
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
statement: this.data = this.data ~ [x]
particle-size: 155
statement: return ()
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
statement: return ()
particle-size: 155
particle-size: 155
particle-size: 155
particle-size: 155
statement: if node == 4 && this.__S2.Q_in.size() {
    this.__S2.__run();
}
particle-size: 1547
particle-size: 1547
statement: return this.data.length
particle-size: 1547
particle-size: 1547
particle-size: 1547
particle-size: 1547
statement: this.__S2.__run()
particle-size: 100
particle-size: 100
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 100
particle-size: 100
statement: r := this.front()
particle-size: 100
particle-size: 100
statement: return this.data[0]
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this.popFront()
particle-size: 100
particle-size: 100
statement: this.data = this.data[1..this.size()]
particle-size: 100
particle-size: 100
statement: return this.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return r
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: if this.size() >= 2 {
    return ();
}
particle-size: 100
particle-size: 100
statement: return this.data.length
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: this.data = this.data ~ [x]
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: return ()
particle-size: 100
particle-size: 100
particle-size: 100
particle-size: 100
statement: if node == 5 && this.__S3.Q_in.size() {
    this.__S3.__run();
}
particle-size: 1547
particle-size: 1547
statement: return this.data.length
particle-size: 1547
particle-size: 1547
particle-size: 1547
particle-size: 1547
statement: this.__S3.__run()
particle-size: 187
particle-size: 187
statement: if this.Q_in.data[0][1] == 1 || this.Q_in.data[0][1] == 2 {
    this.Q_out.pushBack((this.Q_in.takeFront()[0],3));
}
statement: this.Q_out.pushBack((this.Q_in.takeFront()[0],3))
particle-size: 187
particle-size: 187
statement: r := this.front()
particle-size: 187
particle-size: 187
statement: return this.data[0]
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
statement: this.popFront()
particle-size: 187
particle-size: 187
statement: this.data = this.data[1..this.size()]
particle-size: 187
particle-size: 187
statement: return this.data.length
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
statement: return ()
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
statement: return r
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
statement: if this.size() >= 2 {
    return ();
}
particle-size: 187
particle-size: 187
statement: return this.data.length
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
statement: this.data = this.data ~ [x]
particle-size: 187
statement: return ()
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
statement: return ()
particle-size: 187
particle-size: 187
particle-size: 187
particle-size: 187
statement: return ()
particle-size: 2362
particle-size: 2362
particle-size: 2362
particle-size: 897
repetition: 14
statement: __d.__step()
particle-size: 897
particle-size: 897
statement: if this.__H0.Q_in.size() || this.__H0.Q_out.size() || this.__H1.Q_in.size() || this.__H1.Q_out.size() || this.__S0.Q_in.size() || this.__S0.Q_out.size() || this.__S1.Q_in.size() || this.__S1.Q_out.size() || this.__S2.Q_in.size() || this.__S2.Q_out.size() || this.__S3.Q_in.size() || this.__S3.Q_out.size() {
    (action,node) := this.scheduler();
    if action {
        if node == 0 && this.__H0.Q_out.size() {
            (pkt,port) := this.__H0.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,1));
            }
        }
        if node == 1 && this.__H1.Q_out.size() {
            (pkt,port) := this.__H1.Q_out.takeFront();
            if port == 1 {
                this.__S3.Q_in.pushBack((pkt,3));
            }
        }
        if node == 2 && this.__S0.Q_out.size() {
            (pkt,port) := this.__S0.Q_out.takeFront();
            if port == 1 {
                this.__H0.Q_in.pushBack((pkt,1));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,1));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,1));
            }
            if port == 4 {
                this.__S2.Q_in.pushBack((pkt,1));
            }
        }
        if node == 3 && this.__S1.Q_out.size() {
            (pkt,port) := this.__S1.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,2));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,2));
            }
        }
        if node == 4 && this.__S2.Q_out.size() {
            (pkt,port) := this.__S2.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,4));
            }
            if port == 2 {
                this.__S1.Q_in.pushBack((pkt,2));
            }
            if port == 3 {
                this.__S3.Q_in.pushBack((pkt,2));
            }
        }
        if node == 5 && this.__S3.Q_out.size() {
            (pkt,port) := this.__S3.Q_out.takeFront();
            if port == 1 {
                this.__S0.Q_in.pushBack((pkt,3));
            }
            if port == 2 {
                this.__S2.Q_in.pushBack((pkt,3));
            }
            if port == 3 {
                this.__H1.Q_in.pushBack((pkt,1));
            }
        }
    } else {
        if node == 0 && this.__H0.Q_in.size() {
            this.__H0.__run();
        }
        if node == 1 && this.__H1.Q_in.size() {
            this.__H1.__run();
        }
        if node == 2 && this.__S0.Q_in.size() {
            this.__S0.__run();
        }
        if node == 3 && this.__S1.Q_in.size() {
            this.__S1.__run();
        }
        if node == 4 && this.__S2.Q_in.size() {
            this.__S2.__run();
        }
        if node == 5 && this.__S3.Q_in.size() {
            this.__S3.__run();
        }
    }
}
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: return this.data.length
particle-size: 897
particle-size: 897
particle-size: 897
particle-size: 897
statement: (action,node) := this.scheduler()
particle-size: 894
particle-size: 894
statement: actions := ([]: (R × R)[])
particle-size: 894
statement: for i in [0..6){
    if (if i == 0 {
        this.__H0.Q_in;
    } else if i == 1 {
        this.__H1.Q_in;
    } else if i == 2 {
        this.__S0.Q_in;
    } else if i == 3 {
        this.__S1.Q_in;
    } else if i == 4 {
        this.__S2.Q_in;
    } else {
        this.__S3.Q_in;
    }).size() > 0 {
        actions ~= [(0,i)];
    }
    if (if i == 0 {
        this.__H0.Q_out;
    } else if i == 1 {
        this.__H1.Q_out;
    } else if i == 2 {
        this.__S0.Q_out;
    } else if i == 3 {
        this.__S1.Q_out;
    } else if i == 4 {
        this.__S2.Q_out;
    } else {
        this.__S3.Q_out;
    }).size() > 0 {
        actions ~= [(1,i)];
    }
}
loop-index: 0
particle-size: 894
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 894
particle-size: 894
statement: return this.data.length
particle-size: 894
particle-size: 894
particle-size: 894
statement: actions ~= [(0,i)]
particle-size: 720
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 894
particle-size: 894
statement: return this.data.length
particle-size: 894
particle-size: 894
particle-size: 894
statement: actions ~= [(1,i)]
particle-size: 101
loop-index: 1
particle-size: 894
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 894
particle-size: 894
statement: return this.data.length
particle-size: 894
particle-size: 894
particle-size: 894
statement: actions ~= [(0,i)]
particle-size: 152
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 894
particle-size: 894
statement: return this.data.length
particle-size: 894
particle-size: 894
particle-size: 894
loop-index: 2
particle-size: 894
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 894
particle-size: 894
statement: return this.data.length
particle-size: 894
particle-size: 894
particle-size: 894
statement: actions ~= [(0,i)]
particle-size: 111
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 894
particle-size: 894
statement: return this.data.length
particle-size: 894
particle-size: 894
particle-size: 894
statement: actions ~= [(1,i)]
particle-size: 339
loop-index: 3
particle-size: 894
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 894
particle-size: 894
statement: return this.data.length
particle-size: 894
particle-size: 894
particle-size: 894
statement: actions ~= [(0,i)]
particle-size: 157
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 894
particle-size: 894
statement: return this.data.length
particle-size: 894
particle-size: 894
particle-size: 894
statement: actions ~= [(1,i)]
particle-size: 156
loop-index: 4
particle-size: 894
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 894
particle-size: 894
statement: return this.data.length
particle-size: 894
particle-size: 894
particle-size: 894
statement: actions ~= [(0,i)]
particle-size: 134
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 894
particle-size: 894
statement: return this.data.length
particle-size: 894
particle-size: 894
particle-size: 894
statement: actions ~= [(1,i)]
particle-size: 100
loop-index: 5
particle-size: 894
statement: if (if i == 0 {
    this.__H0.Q_in;
} else if i == 1 {
    this.__H1.Q_in;
} else if i == 2 {
    this.__S0.Q_in;
} else if i == 3 {
    this.__S1.Q_in;
} else if i == 4 {
    this.__S2.Q_in;
} else {
    this.__S3.Q_in;
}).size() > 0 {
    actions ~= [(0,i)];
}
particle-size: 894
particle-size: 894
statement: return this.data.length
particle-size: 894
particle-size: 894
particle-size: 894
statement: actions ~= [(0,i)]
particle-size: 222
statement: if (if i == 0 {
    this.__H0.Q_out;
} else if i == 1 {
    this.__H1.Q_out;
} else if i == 2 {
    this.__S0.Q_out;
} else if i == 3 {
    this.__S1.Q_out;
} else if i == 4 {
    this.__S2.Q_out;
} else {
    this.__S3.Q_out;
}).size() > 0 {
    actions ~= [(1,i)];
}
particle-size: 894
particle-size: 894
statement: return t